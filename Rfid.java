// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rfid.proto

package rfid;

public final class Rfid {
  private Rfid() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  /**
   * Protobuf enum {@code rfid.SiteType}
   */
  public enum SiteType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     * 0. 调试用
     * </pre>
     *
     * <code>DEBUG = 0;</code>
     */
    DEBUG(0),
    /**
     * <pre>
     * 1. 标签发放者
     * </pre>
     *
     * <code>DISPENSER = 1;</code>
     */
    DISPENSER(1),
    /**
     * <pre>
     * 2. 质检站点
     * </pre>
     *
     * <code>CHECKER = 2;</code>
     */
    CHECKER(2),
    /**
     * <pre>
     * 3. 入库站点
     * </pre>
     *
     * <code>ENTRY = 3;</code>
     */
    ENTRY(3),
    /**
     * <pre>
     * 4. 出库站点
     * </pre>
     *
     * <code>EXIT = 4;</code>
     */
    EXIT(4),
    UNRECOGNIZED(-1),
    ;

    /**
     * <pre>
     * 0. 调试用
     * </pre>
     *
     * <code>DEBUG = 0;</code>
     */
    public static final int DEBUG_VALUE = 0;
    /**
     * <pre>
     * 1. 标签发放者
     * </pre>
     *
     * <code>DISPENSER = 1;</code>
     */
    public static final int DISPENSER_VALUE = 1;
    /**
     * <pre>
     * 2. 质检站点
     * </pre>
     *
     * <code>CHECKER = 2;</code>
     */
    public static final int CHECKER_VALUE = 2;
    /**
     * <pre>
     * 3. 入库站点
     * </pre>
     *
     * <code>ENTRY = 3;</code>
     */
    public static final int ENTRY_VALUE = 3;
    /**
     * <pre>
     * 4. 出库站点
     * </pre>
     *
     * <code>EXIT = 4;</code>
     */
    public static final int EXIT_VALUE = 4;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static SiteType valueOf(int value) {
      return forNumber(value);
    }

    public static SiteType forNumber(int value) {
      switch (value) {
        case 0: return DEBUG;
        case 1: return DISPENSER;
        case 2: return CHECKER;
        case 3: return ENTRY;
        case 4: return EXIT;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<SiteType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        SiteType> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<SiteType>() {
            public SiteType findValueByNumber(int number) {
              return SiteType.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return rfid.Rfid.getDescriptor().getEnumTypes().get(0);
    }

    private static final SiteType[] VALUES = values();

    public static SiteType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private SiteType(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:rfid.SiteType)
  }

  /**
   * Protobuf enum {@code rfid.ResultCode}
   */
  public enum ResultCode
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>NotErr = 0;</code>
     */
    NotErr(0),
    /**
     * <pre>
     * 初始化错误
     * </pre>
     *
     * <code>ErrNotInDebugMode = 1;</code>
     */
    ErrNotInDebugMode(1),
    /**
     * <pre>
     * 开始初始化错误
     * </pre>
     *
     * <code>ErrStartInit = 2;</code>
     */
    ErrStartInit(2),
    /**
     * <pre>
     * 停止初始化错误
     * </pre>
     *
     * <code>ErrStopInit = 3;</code>
     */
    ErrStopInit(3),
    /**
     * <pre>
     * 开始盘存错误
     * </pre>
     *
     * <code>ErrStartInventory = 4;</code>
     */
    ErrStartInventory(4),
    /**
     * <pre>
     * 停止盘存错误
     * </pre>
     *
     * <code>ErrStopInventory = 5;</code>
     */
    ErrStopInventory(5),
    /**
     * <pre>
     * 读取盘存标签缓存失败
     * </pre>
     *
     * <code>ErrReadInventory = 6;</code>
     */
    ErrReadInventory(6),
    /**
     * <pre>
     * 清空盘存缓存失败
     * </pre>
     *
     * <code>ErrResetInventory = 7;</code>
     */
    ErrResetInventory(7),
    UNRECOGNIZED(-1),
    ;

    /**
     * <code>NotErr = 0;</code>
     */
    public static final int NotErr_VALUE = 0;
    /**
     * <pre>
     * 初始化错误
     * </pre>
     *
     * <code>ErrNotInDebugMode = 1;</code>
     */
    public static final int ErrNotInDebugMode_VALUE = 1;
    /**
     * <pre>
     * 开始初始化错误
     * </pre>
     *
     * <code>ErrStartInit = 2;</code>
     */
    public static final int ErrStartInit_VALUE = 2;
    /**
     * <pre>
     * 停止初始化错误
     * </pre>
     *
     * <code>ErrStopInit = 3;</code>
     */
    public static final int ErrStopInit_VALUE = 3;
    /**
     * <pre>
     * 开始盘存错误
     * </pre>
     *
     * <code>ErrStartInventory = 4;</code>
     */
    public static final int ErrStartInventory_VALUE = 4;
    /**
     * <pre>
     * 停止盘存错误
     * </pre>
     *
     * <code>ErrStopInventory = 5;</code>
     */
    public static final int ErrStopInventory_VALUE = 5;
    /**
     * <pre>
     * 读取盘存标签缓存失败
     * </pre>
     *
     * <code>ErrReadInventory = 6;</code>
     */
    public static final int ErrReadInventory_VALUE = 6;
    /**
     * <pre>
     * 清空盘存缓存失败
     * </pre>
     *
     * <code>ErrResetInventory = 7;</code>
     */
    public static final int ErrResetInventory_VALUE = 7;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static ResultCode valueOf(int value) {
      return forNumber(value);
    }

    public static ResultCode forNumber(int value) {
      switch (value) {
        case 0: return NotErr;
        case 1: return ErrNotInDebugMode;
        case 2: return ErrStartInit;
        case 3: return ErrStopInit;
        case 4: return ErrStartInventory;
        case 5: return ErrStopInventory;
        case 6: return ErrReadInventory;
        case 7: return ErrResetInventory;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<ResultCode>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        ResultCode> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<ResultCode>() {
            public ResultCode findValueByNumber(int number) {
              return ResultCode.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return rfid.Rfid.getDescriptor().getEnumTypes().get(1);
    }

    private static final ResultCode[] VALUES = values();

    public static ResultCode valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private ResultCode(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:rfid.ResultCode)
  }

  /**
   * Protobuf enum {@code rfid.OpCode}
   */
  public enum OpCode
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>Start = 0;</code>
     */
    Start(0),
    /**
     * <code>Stop = 1;</code>
     */
    Stop(1),
    UNRECOGNIZED(-1),
    ;

    /**
     * <code>Start = 0;</code>
     */
    public static final int Start_VALUE = 0;
    /**
     * <code>Stop = 1;</code>
     */
    public static final int Stop_VALUE = 1;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static OpCode valueOf(int value) {
      return forNumber(value);
    }

    public static OpCode forNumber(int value) {
      switch (value) {
        case 0: return Start;
        case 1: return Stop;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<OpCode>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        OpCode> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<OpCode>() {
            public OpCode findValueByNumber(int number) {
              return OpCode.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return rfid.Rfid.getDescriptor().getEnumTypes().get(2);
    }

    private static final OpCode[] VALUES = values();

    public static OpCode valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private OpCode(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:rfid.OpCode)
  }

  public interface BaseParamOrBuilder extends
      // @@protoc_insertion_point(interface_extends:rfid.BaseParam)
      com.google.protobuf.MessageOrBuilder {
  }
  /**
   * <pre>
   * 通用请求信息
   * </pre>
   *
   * Protobuf type {@code rfid.BaseParam}
   */
  public  static final class BaseParam extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:rfid.BaseParam)
      BaseParamOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use BaseParam.newBuilder() to construct.
    private BaseParam(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private BaseParam() {
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private BaseParam(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownFieldProto3(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return rfid.Rfid.internal_static_rfid_BaseParam_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return rfid.Rfid.internal_static_rfid_BaseParam_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              rfid.Rfid.BaseParam.class, rfid.Rfid.BaseParam.Builder.class);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof rfid.Rfid.BaseParam)) {
        return super.equals(obj);
      }
      rfid.Rfid.BaseParam other = (rfid.Rfid.BaseParam) obj;

      boolean result = true;
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static rfid.Rfid.BaseParam parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static rfid.Rfid.BaseParam parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static rfid.Rfid.BaseParam parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static rfid.Rfid.BaseParam parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static rfid.Rfid.BaseParam parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static rfid.Rfid.BaseParam parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static rfid.Rfid.BaseParam parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static rfid.Rfid.BaseParam parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static rfid.Rfid.BaseParam parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static rfid.Rfid.BaseParam parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static rfid.Rfid.BaseParam parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static rfid.Rfid.BaseParam parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(rfid.Rfid.BaseParam prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * 通用请求信息
     * </pre>
     *
     * Protobuf type {@code rfid.BaseParam}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:rfid.BaseParam)
        rfid.Rfid.BaseParamOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return rfid.Rfid.internal_static_rfid_BaseParam_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return rfid.Rfid.internal_static_rfid_BaseParam_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                rfid.Rfid.BaseParam.class, rfid.Rfid.BaseParam.Builder.class);
      }

      // Construct using rfid.Rfid.BaseParam.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return rfid.Rfid.internal_static_rfid_BaseParam_descriptor;
      }

      @java.lang.Override
      public rfid.Rfid.BaseParam getDefaultInstanceForType() {
        return rfid.Rfid.BaseParam.getDefaultInstance();
      }

      @java.lang.Override
      public rfid.Rfid.BaseParam build() {
        rfid.Rfid.BaseParam result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public rfid.Rfid.BaseParam buildPartial() {
        rfid.Rfid.BaseParam result = new rfid.Rfid.BaseParam(this);
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return (Builder) super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof rfid.Rfid.BaseParam) {
          return mergeFrom((rfid.Rfid.BaseParam)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(rfid.Rfid.BaseParam other) {
        if (other == rfid.Rfid.BaseParam.getDefaultInstance()) return this;
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        rfid.Rfid.BaseParam parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (rfid.Rfid.BaseParam) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFieldsProto3(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:rfid.BaseParam)
    }

    // @@protoc_insertion_point(class_scope:rfid.BaseParam)
    private static final rfid.Rfid.BaseParam DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new rfid.Rfid.BaseParam();
    }

    public static rfid.Rfid.BaseParam getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<BaseParam>
        PARSER = new com.google.protobuf.AbstractParser<BaseParam>() {
      @java.lang.Override
      public BaseParam parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new BaseParam(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<BaseParam> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<BaseParam> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public rfid.Rfid.BaseParam getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface BaseReplyOrBuilder extends
      // @@protoc_insertion_point(interface_extends:rfid.BaseReply)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>.rfid.ResultCode ResultCode = 1;</code>
     */
    int getResultCodeValue();
    /**
     * <code>.rfid.ResultCode ResultCode = 1;</code>
     */
    rfid.Rfid.ResultCode getResultCode();

    /**
     * <code>string ResultMsg = 2;</code>
     */
    java.lang.String getResultMsg();
    /**
     * <code>string ResultMsg = 2;</code>
     */
    com.google.protobuf.ByteString
        getResultMsgBytes();
  }
  /**
   * <pre>
   * 通用返回信息
   * </pre>
   *
   * Protobuf type {@code rfid.BaseReply}
   */
  public  static final class BaseReply extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:rfid.BaseReply)
      BaseReplyOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use BaseReply.newBuilder() to construct.
    private BaseReply(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private BaseReply() {
      resultCode_ = 0;
      resultMsg_ = "";
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private BaseReply(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 8: {
              int rawValue = input.readEnum();

              resultCode_ = rawValue;
              break;
            }
            case 18: {
              java.lang.String s = input.readStringRequireUtf8();

              resultMsg_ = s;
              break;
            }
            default: {
              if (!parseUnknownFieldProto3(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return rfid.Rfid.internal_static_rfid_BaseReply_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return rfid.Rfid.internal_static_rfid_BaseReply_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              rfid.Rfid.BaseReply.class, rfid.Rfid.BaseReply.Builder.class);
    }

    public static final int RESULTCODE_FIELD_NUMBER = 1;
    private int resultCode_;
    /**
     * <code>.rfid.ResultCode ResultCode = 1;</code>
     */
    public int getResultCodeValue() {
      return resultCode_;
    }
    /**
     * <code>.rfid.ResultCode ResultCode = 1;</code>
     */
    public rfid.Rfid.ResultCode getResultCode() {
      @SuppressWarnings("deprecation")
      rfid.Rfid.ResultCode result = rfid.Rfid.ResultCode.valueOf(resultCode_);
      return result == null ? rfid.Rfid.ResultCode.UNRECOGNIZED : result;
    }

    public static final int RESULTMSG_FIELD_NUMBER = 2;
    private volatile java.lang.Object resultMsg_;
    /**
     * <code>string ResultMsg = 2;</code>
     */
    public java.lang.String getResultMsg() {
      java.lang.Object ref = resultMsg_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        resultMsg_ = s;
        return s;
      }
    }
    /**
     * <code>string ResultMsg = 2;</code>
     */
    public com.google.protobuf.ByteString
        getResultMsgBytes() {
      java.lang.Object ref = resultMsg_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        resultMsg_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (resultCode_ != rfid.Rfid.ResultCode.NotErr.getNumber()) {
        output.writeEnum(1, resultCode_);
      }
      if (!getResultMsgBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 2, resultMsg_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (resultCode_ != rfid.Rfid.ResultCode.NotErr.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, resultCode_);
      }
      if (!getResultMsgBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, resultMsg_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof rfid.Rfid.BaseReply)) {
        return super.equals(obj);
      }
      rfid.Rfid.BaseReply other = (rfid.Rfid.BaseReply) obj;

      boolean result = true;
      result = result && resultCode_ == other.resultCode_;
      result = result && getResultMsg()
          .equals(other.getResultMsg());
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + RESULTCODE_FIELD_NUMBER;
      hash = (53 * hash) + resultCode_;
      hash = (37 * hash) + RESULTMSG_FIELD_NUMBER;
      hash = (53 * hash) + getResultMsg().hashCode();
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static rfid.Rfid.BaseReply parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static rfid.Rfid.BaseReply parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static rfid.Rfid.BaseReply parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static rfid.Rfid.BaseReply parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static rfid.Rfid.BaseReply parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static rfid.Rfid.BaseReply parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static rfid.Rfid.BaseReply parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static rfid.Rfid.BaseReply parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static rfid.Rfid.BaseReply parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static rfid.Rfid.BaseReply parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static rfid.Rfid.BaseReply parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static rfid.Rfid.BaseReply parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(rfid.Rfid.BaseReply prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * 通用返回信息
     * </pre>
     *
     * Protobuf type {@code rfid.BaseReply}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:rfid.BaseReply)
        rfid.Rfid.BaseReplyOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return rfid.Rfid.internal_static_rfid_BaseReply_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return rfid.Rfid.internal_static_rfid_BaseReply_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                rfid.Rfid.BaseReply.class, rfid.Rfid.BaseReply.Builder.class);
      }

      // Construct using rfid.Rfid.BaseReply.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        resultCode_ = 0;

        resultMsg_ = "";

        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return rfid.Rfid.internal_static_rfid_BaseReply_descriptor;
      }

      @java.lang.Override
      public rfid.Rfid.BaseReply getDefaultInstanceForType() {
        return rfid.Rfid.BaseReply.getDefaultInstance();
      }

      @java.lang.Override
      public rfid.Rfid.BaseReply build() {
        rfid.Rfid.BaseReply result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public rfid.Rfid.BaseReply buildPartial() {
        rfid.Rfid.BaseReply result = new rfid.Rfid.BaseReply(this);
        result.resultCode_ = resultCode_;
        result.resultMsg_ = resultMsg_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return (Builder) super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof rfid.Rfid.BaseReply) {
          return mergeFrom((rfid.Rfid.BaseReply)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(rfid.Rfid.BaseReply other) {
        if (other == rfid.Rfid.BaseReply.getDefaultInstance()) return this;
        if (other.resultCode_ != 0) {
          setResultCodeValue(other.getResultCodeValue());
        }
        if (!other.getResultMsg().isEmpty()) {
          resultMsg_ = other.resultMsg_;
          onChanged();
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        rfid.Rfid.BaseReply parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (rfid.Rfid.BaseReply) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private int resultCode_ = 0;
      /**
       * <code>.rfid.ResultCode ResultCode = 1;</code>
       */
      public int getResultCodeValue() {
        return resultCode_;
      }
      /**
       * <code>.rfid.ResultCode ResultCode = 1;</code>
       */
      public Builder setResultCodeValue(int value) {
        resultCode_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>.rfid.ResultCode ResultCode = 1;</code>
       */
      public rfid.Rfid.ResultCode getResultCode() {
        @SuppressWarnings("deprecation")
        rfid.Rfid.ResultCode result = rfid.Rfid.ResultCode.valueOf(resultCode_);
        return result == null ? rfid.Rfid.ResultCode.UNRECOGNIZED : result;
      }
      /**
       * <code>.rfid.ResultCode ResultCode = 1;</code>
       */
      public Builder setResultCode(rfid.Rfid.ResultCode value) {
        if (value == null) {
          throw new NullPointerException();
        }
        
        resultCode_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <code>.rfid.ResultCode ResultCode = 1;</code>
       */
      public Builder clearResultCode() {
        
        resultCode_ = 0;
        onChanged();
        return this;
      }

      private java.lang.Object resultMsg_ = "";
      /**
       * <code>string ResultMsg = 2;</code>
       */
      public java.lang.String getResultMsg() {
        java.lang.Object ref = resultMsg_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          resultMsg_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>string ResultMsg = 2;</code>
       */
      public com.google.protobuf.ByteString
          getResultMsgBytes() {
        java.lang.Object ref = resultMsg_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          resultMsg_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>string ResultMsg = 2;</code>
       */
      public Builder setResultMsg(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        resultMsg_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>string ResultMsg = 2;</code>
       */
      public Builder clearResultMsg() {
        
        resultMsg_ = getDefaultInstance().getResultMsg();
        onChanged();
        return this;
      }
      /**
       * <code>string ResultMsg = 2;</code>
       */
      public Builder setResultMsgBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        resultMsg_ = value;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFieldsProto3(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:rfid.BaseReply)
    }

    // @@protoc_insertion_point(class_scope:rfid.BaseReply)
    private static final rfid.Rfid.BaseReply DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new rfid.Rfid.BaseReply();
    }

    public static rfid.Rfid.BaseReply getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<BaseReply>
        PARSER = new com.google.protobuf.AbstractParser<BaseReply>() {
      @java.lang.Override
      public BaseReply parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new BaseReply(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<BaseReply> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<BaseReply> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public rfid.Rfid.BaseReply getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface RegisterParamOrBuilder extends
      // @@protoc_insertion_point(interface_extends:rfid.RegisterParam)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>.rfid.BaseParam BaseInfo = 1;</code>
     */
    boolean hasBaseInfo();
    /**
     * <code>.rfid.BaseParam BaseInfo = 1;</code>
     */
    rfid.Rfid.BaseParam getBaseInfo();
    /**
     * <code>.rfid.BaseParam BaseInfo = 1;</code>
     */
    rfid.Rfid.BaseParamOrBuilder getBaseInfoOrBuilder();

    /**
     * <pre>
     * 工厂ID
     * </pre>
     *
     * <code>int64 FacotryId = 2;</code>
     */
    long getFacotryId();

    /**
     * <pre>
     * 站点类型
     * </pre>
     *
     * <code>repeated .rfid.SiteType SiteTypes = 3;</code>
     */
    java.util.List<rfid.Rfid.SiteType> getSiteTypesList();
    /**
     * <pre>
     * 站点类型
     * </pre>
     *
     * <code>repeated .rfid.SiteType SiteTypes = 3;</code>
     */
    int getSiteTypesCount();
    /**
     * <pre>
     * 站点类型
     * </pre>
     *
     * <code>repeated .rfid.SiteType SiteTypes = 3;</code>
     */
    rfid.Rfid.SiteType getSiteTypes(int index);
    /**
     * <pre>
     * 站点类型
     * </pre>
     *
     * <code>repeated .rfid.SiteType SiteTypes = 3;</code>
     */
    java.util.List<java.lang.Integer>
    getSiteTypesValueList();
    /**
     * <pre>
     * 站点类型
     * </pre>
     *
     * <code>repeated .rfid.SiteType SiteTypes = 3;</code>
     */
    int getSiteTypesValue(int index);

    /**
     * <pre>
     * RPC地址
     * </pre>
     *
     * <code>string RPCAddr = 4;</code>
     */
    java.lang.String getRPCAddr();
    /**
     * <pre>
     * RPC地址
     * </pre>
     *
     * <code>string RPCAddr = 4;</code>
     */
    com.google.protobuf.ByteString
        getRPCAddrBytes();

    /**
     * <pre>
     * 公钥
     * </pre>
     *
     * <code>bytes PublicKey = 5;</code>
     */
    com.google.protobuf.ByteString getPublicKey();
  }
  /**
   * <pre>
   * 注册RFID 设备
   * </pre>
   *
   * Protobuf type {@code rfid.RegisterParam}
   */
  public  static final class RegisterParam extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:rfid.RegisterParam)
      RegisterParamOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use RegisterParam.newBuilder() to construct.
    private RegisterParam(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private RegisterParam() {
      facotryId_ = 0L;
      siteTypes_ = java.util.Collections.emptyList();
      rPCAddr_ = "";
      publicKey_ = com.google.protobuf.ByteString.EMPTY;
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private RegisterParam(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              rfid.Rfid.BaseParam.Builder subBuilder = null;
              if (baseInfo_ != null) {
                subBuilder = baseInfo_.toBuilder();
              }
              baseInfo_ = input.readMessage(rfid.Rfid.BaseParam.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(baseInfo_);
                baseInfo_ = subBuilder.buildPartial();
              }

              break;
            }
            case 16: {

              facotryId_ = input.readInt64();
              break;
            }
            case 24: {
              int rawValue = input.readEnum();
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                siteTypes_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000004;
              }
              siteTypes_.add(rawValue);
              break;
            }
            case 26: {
              int length = input.readRawVarint32();
              int oldLimit = input.pushLimit(length);
              while(input.getBytesUntilLimit() > 0) {
                int rawValue = input.readEnum();
                if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                  siteTypes_ = new java.util.ArrayList<java.lang.Integer>();
                  mutable_bitField0_ |= 0x00000004;
                }
                siteTypes_.add(rawValue);
              }
              input.popLimit(oldLimit);
              break;
            }
            case 34: {
              java.lang.String s = input.readStringRequireUtf8();

              rPCAddr_ = s;
              break;
            }
            case 42: {

              publicKey_ = input.readBytes();
              break;
            }
            default: {
              if (!parseUnknownFieldProto3(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
          siteTypes_ = java.util.Collections.unmodifiableList(siteTypes_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return rfid.Rfid.internal_static_rfid_RegisterParam_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return rfid.Rfid.internal_static_rfid_RegisterParam_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              rfid.Rfid.RegisterParam.class, rfid.Rfid.RegisterParam.Builder.class);
    }

    private int bitField0_;
    public static final int BASEINFO_FIELD_NUMBER = 1;
    private rfid.Rfid.BaseParam baseInfo_;
    /**
     * <code>.rfid.BaseParam BaseInfo = 1;</code>
     */
    public boolean hasBaseInfo() {
      return baseInfo_ != null;
    }
    /**
     * <code>.rfid.BaseParam BaseInfo = 1;</code>
     */
    public rfid.Rfid.BaseParam getBaseInfo() {
      return baseInfo_ == null ? rfid.Rfid.BaseParam.getDefaultInstance() : baseInfo_;
    }
    /**
     * <code>.rfid.BaseParam BaseInfo = 1;</code>
     */
    public rfid.Rfid.BaseParamOrBuilder getBaseInfoOrBuilder() {
      return getBaseInfo();
    }

    public static final int FACOTRYID_FIELD_NUMBER = 2;
    private long facotryId_;
    /**
     * <pre>
     * 工厂ID
     * </pre>
     *
     * <code>int64 FacotryId = 2;</code>
     */
    public long getFacotryId() {
      return facotryId_;
    }

    public static final int SITETYPES_FIELD_NUMBER = 3;
    private java.util.List<java.lang.Integer> siteTypes_;
    private static final com.google.protobuf.Internal.ListAdapter.Converter<
        java.lang.Integer, rfid.Rfid.SiteType> siteTypes_converter_ =
            new com.google.protobuf.Internal.ListAdapter.Converter<
                java.lang.Integer, rfid.Rfid.SiteType>() {
              public rfid.Rfid.SiteType convert(java.lang.Integer from) {
                @SuppressWarnings("deprecation")
                rfid.Rfid.SiteType result = rfid.Rfid.SiteType.valueOf(from);
                return result == null ? rfid.Rfid.SiteType.UNRECOGNIZED : result;
              }
            };
    /**
     * <pre>
     * 站点类型
     * </pre>
     *
     * <code>repeated .rfid.SiteType SiteTypes = 3;</code>
     */
    public java.util.List<rfid.Rfid.SiteType> getSiteTypesList() {
      return new com.google.protobuf.Internal.ListAdapter<
          java.lang.Integer, rfid.Rfid.SiteType>(siteTypes_, siteTypes_converter_);
    }
    /**
     * <pre>
     * 站点类型
     * </pre>
     *
     * <code>repeated .rfid.SiteType SiteTypes = 3;</code>
     */
    public int getSiteTypesCount() {
      return siteTypes_.size();
    }
    /**
     * <pre>
     * 站点类型
     * </pre>
     *
     * <code>repeated .rfid.SiteType SiteTypes = 3;</code>
     */
    public rfid.Rfid.SiteType getSiteTypes(int index) {
      return siteTypes_converter_.convert(siteTypes_.get(index));
    }
    /**
     * <pre>
     * 站点类型
     * </pre>
     *
     * <code>repeated .rfid.SiteType SiteTypes = 3;</code>
     */
    public java.util.List<java.lang.Integer>
    getSiteTypesValueList() {
      return siteTypes_;
    }
    /**
     * <pre>
     * 站点类型
     * </pre>
     *
     * <code>repeated .rfid.SiteType SiteTypes = 3;</code>
     */
    public int getSiteTypesValue(int index) {
      return siteTypes_.get(index);
    }
    private int siteTypesMemoizedSerializedSize;

    public static final int RPCADDR_FIELD_NUMBER = 4;
    private volatile java.lang.Object rPCAddr_;
    /**
     * <pre>
     * RPC地址
     * </pre>
     *
     * <code>string RPCAddr = 4;</code>
     */
    public java.lang.String getRPCAddr() {
      java.lang.Object ref = rPCAddr_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        rPCAddr_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * RPC地址
     * </pre>
     *
     * <code>string RPCAddr = 4;</code>
     */
    public com.google.protobuf.ByteString
        getRPCAddrBytes() {
      java.lang.Object ref = rPCAddr_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        rPCAddr_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int PUBLICKEY_FIELD_NUMBER = 5;
    private com.google.protobuf.ByteString publicKey_;
    /**
     * <pre>
     * 公钥
     * </pre>
     *
     * <code>bytes PublicKey = 5;</code>
     */
    public com.google.protobuf.ByteString getPublicKey() {
      return publicKey_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (baseInfo_ != null) {
        output.writeMessage(1, getBaseInfo());
      }
      if (facotryId_ != 0L) {
        output.writeInt64(2, facotryId_);
      }
      if (getSiteTypesList().size() > 0) {
        output.writeUInt32NoTag(26);
        output.writeUInt32NoTag(siteTypesMemoizedSerializedSize);
      }
      for (int i = 0; i < siteTypes_.size(); i++) {
        output.writeEnumNoTag(siteTypes_.get(i));
      }
      if (!getRPCAddrBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 4, rPCAddr_);
      }
      if (!publicKey_.isEmpty()) {
        output.writeBytes(5, publicKey_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (baseInfo_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getBaseInfo());
      }
      if (facotryId_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(2, facotryId_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < siteTypes_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeEnumSizeNoTag(siteTypes_.get(i));
        }
        size += dataSize;
        if (!getSiteTypesList().isEmpty()) {  size += 1;
          size += com.google.protobuf.CodedOutputStream
            .computeUInt32SizeNoTag(dataSize);
        }siteTypesMemoizedSerializedSize = dataSize;
      }
      if (!getRPCAddrBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(4, rPCAddr_);
      }
      if (!publicKey_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(5, publicKey_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof rfid.Rfid.RegisterParam)) {
        return super.equals(obj);
      }
      rfid.Rfid.RegisterParam other = (rfid.Rfid.RegisterParam) obj;

      boolean result = true;
      result = result && (hasBaseInfo() == other.hasBaseInfo());
      if (hasBaseInfo()) {
        result = result && getBaseInfo()
            .equals(other.getBaseInfo());
      }
      result = result && (getFacotryId()
          == other.getFacotryId());
      result = result && siteTypes_.equals(other.siteTypes_);
      result = result && getRPCAddr()
          .equals(other.getRPCAddr());
      result = result && getPublicKey()
          .equals(other.getPublicKey());
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasBaseInfo()) {
        hash = (37 * hash) + BASEINFO_FIELD_NUMBER;
        hash = (53 * hash) + getBaseInfo().hashCode();
      }
      hash = (37 * hash) + FACOTRYID_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getFacotryId());
      if (getSiteTypesCount() > 0) {
        hash = (37 * hash) + SITETYPES_FIELD_NUMBER;
        hash = (53 * hash) + siteTypes_.hashCode();
      }
      hash = (37 * hash) + RPCADDR_FIELD_NUMBER;
      hash = (53 * hash) + getRPCAddr().hashCode();
      hash = (37 * hash) + PUBLICKEY_FIELD_NUMBER;
      hash = (53 * hash) + getPublicKey().hashCode();
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static rfid.Rfid.RegisterParam parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static rfid.Rfid.RegisterParam parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static rfid.Rfid.RegisterParam parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static rfid.Rfid.RegisterParam parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static rfid.Rfid.RegisterParam parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static rfid.Rfid.RegisterParam parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static rfid.Rfid.RegisterParam parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static rfid.Rfid.RegisterParam parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static rfid.Rfid.RegisterParam parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static rfid.Rfid.RegisterParam parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static rfid.Rfid.RegisterParam parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static rfid.Rfid.RegisterParam parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(rfid.Rfid.RegisterParam prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * 注册RFID 设备
     * </pre>
     *
     * Protobuf type {@code rfid.RegisterParam}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:rfid.RegisterParam)
        rfid.Rfid.RegisterParamOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return rfid.Rfid.internal_static_rfid_RegisterParam_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return rfid.Rfid.internal_static_rfid_RegisterParam_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                rfid.Rfid.RegisterParam.class, rfid.Rfid.RegisterParam.Builder.class);
      }

      // Construct using rfid.Rfid.RegisterParam.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        if (baseInfoBuilder_ == null) {
          baseInfo_ = null;
        } else {
          baseInfo_ = null;
          baseInfoBuilder_ = null;
        }
        facotryId_ = 0L;

        siteTypes_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        rPCAddr_ = "";

        publicKey_ = com.google.protobuf.ByteString.EMPTY;

        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return rfid.Rfid.internal_static_rfid_RegisterParam_descriptor;
      }

      @java.lang.Override
      public rfid.Rfid.RegisterParam getDefaultInstanceForType() {
        return rfid.Rfid.RegisterParam.getDefaultInstance();
      }

      @java.lang.Override
      public rfid.Rfid.RegisterParam build() {
        rfid.Rfid.RegisterParam result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public rfid.Rfid.RegisterParam buildPartial() {
        rfid.Rfid.RegisterParam result = new rfid.Rfid.RegisterParam(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (baseInfoBuilder_ == null) {
          result.baseInfo_ = baseInfo_;
        } else {
          result.baseInfo_ = baseInfoBuilder_.build();
        }
        result.facotryId_ = facotryId_;
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          siteTypes_ = java.util.Collections.unmodifiableList(siteTypes_);
          bitField0_ = (bitField0_ & ~0x00000004);
        }
        result.siteTypes_ = siteTypes_;
        result.rPCAddr_ = rPCAddr_;
        result.publicKey_ = publicKey_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return (Builder) super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof rfid.Rfid.RegisterParam) {
          return mergeFrom((rfid.Rfid.RegisterParam)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(rfid.Rfid.RegisterParam other) {
        if (other == rfid.Rfid.RegisterParam.getDefaultInstance()) return this;
        if (other.hasBaseInfo()) {
          mergeBaseInfo(other.getBaseInfo());
        }
        if (other.getFacotryId() != 0L) {
          setFacotryId(other.getFacotryId());
        }
        if (!other.siteTypes_.isEmpty()) {
          if (siteTypes_.isEmpty()) {
            siteTypes_ = other.siteTypes_;
            bitField0_ = (bitField0_ & ~0x00000004);
          } else {
            ensureSiteTypesIsMutable();
            siteTypes_.addAll(other.siteTypes_);
          }
          onChanged();
        }
        if (!other.getRPCAddr().isEmpty()) {
          rPCAddr_ = other.rPCAddr_;
          onChanged();
        }
        if (other.getPublicKey() != com.google.protobuf.ByteString.EMPTY) {
          setPublicKey(other.getPublicKey());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        rfid.Rfid.RegisterParam parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (rfid.Rfid.RegisterParam) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private rfid.Rfid.BaseParam baseInfo_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          rfid.Rfid.BaseParam, rfid.Rfid.BaseParam.Builder, rfid.Rfid.BaseParamOrBuilder> baseInfoBuilder_;
      /**
       * <code>.rfid.BaseParam BaseInfo = 1;</code>
       */
      public boolean hasBaseInfo() {
        return baseInfoBuilder_ != null || baseInfo_ != null;
      }
      /**
       * <code>.rfid.BaseParam BaseInfo = 1;</code>
       */
      public rfid.Rfid.BaseParam getBaseInfo() {
        if (baseInfoBuilder_ == null) {
          return baseInfo_ == null ? rfid.Rfid.BaseParam.getDefaultInstance() : baseInfo_;
        } else {
          return baseInfoBuilder_.getMessage();
        }
      }
      /**
       * <code>.rfid.BaseParam BaseInfo = 1;</code>
       */
      public Builder setBaseInfo(rfid.Rfid.BaseParam value) {
        if (baseInfoBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          baseInfo_ = value;
          onChanged();
        } else {
          baseInfoBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <code>.rfid.BaseParam BaseInfo = 1;</code>
       */
      public Builder setBaseInfo(
          rfid.Rfid.BaseParam.Builder builderForValue) {
        if (baseInfoBuilder_ == null) {
          baseInfo_ = builderForValue.build();
          onChanged();
        } else {
          baseInfoBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <code>.rfid.BaseParam BaseInfo = 1;</code>
       */
      public Builder mergeBaseInfo(rfid.Rfid.BaseParam value) {
        if (baseInfoBuilder_ == null) {
          if (baseInfo_ != null) {
            baseInfo_ =
              rfid.Rfid.BaseParam.newBuilder(baseInfo_).mergeFrom(value).buildPartial();
          } else {
            baseInfo_ = value;
          }
          onChanged();
        } else {
          baseInfoBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <code>.rfid.BaseParam BaseInfo = 1;</code>
       */
      public Builder clearBaseInfo() {
        if (baseInfoBuilder_ == null) {
          baseInfo_ = null;
          onChanged();
        } else {
          baseInfo_ = null;
          baseInfoBuilder_ = null;
        }

        return this;
      }
      /**
       * <code>.rfid.BaseParam BaseInfo = 1;</code>
       */
      public rfid.Rfid.BaseParam.Builder getBaseInfoBuilder() {
        
        onChanged();
        return getBaseInfoFieldBuilder().getBuilder();
      }
      /**
       * <code>.rfid.BaseParam BaseInfo = 1;</code>
       */
      public rfid.Rfid.BaseParamOrBuilder getBaseInfoOrBuilder() {
        if (baseInfoBuilder_ != null) {
          return baseInfoBuilder_.getMessageOrBuilder();
        } else {
          return baseInfo_ == null ?
              rfid.Rfid.BaseParam.getDefaultInstance() : baseInfo_;
        }
      }
      /**
       * <code>.rfid.BaseParam BaseInfo = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          rfid.Rfid.BaseParam, rfid.Rfid.BaseParam.Builder, rfid.Rfid.BaseParamOrBuilder> 
          getBaseInfoFieldBuilder() {
        if (baseInfoBuilder_ == null) {
          baseInfoBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              rfid.Rfid.BaseParam, rfid.Rfid.BaseParam.Builder, rfid.Rfid.BaseParamOrBuilder>(
                  getBaseInfo(),
                  getParentForChildren(),
                  isClean());
          baseInfo_ = null;
        }
        return baseInfoBuilder_;
      }

      private long facotryId_ ;
      /**
       * <pre>
       * 工厂ID
       * </pre>
       *
       * <code>int64 FacotryId = 2;</code>
       */
      public long getFacotryId() {
        return facotryId_;
      }
      /**
       * <pre>
       * 工厂ID
       * </pre>
       *
       * <code>int64 FacotryId = 2;</code>
       */
      public Builder setFacotryId(long value) {
        
        facotryId_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 工厂ID
       * </pre>
       *
       * <code>int64 FacotryId = 2;</code>
       */
      public Builder clearFacotryId() {
        
        facotryId_ = 0L;
        onChanged();
        return this;
      }

      private java.util.List<java.lang.Integer> siteTypes_ =
        java.util.Collections.emptyList();
      private void ensureSiteTypesIsMutable() {
        if (!((bitField0_ & 0x00000004) == 0x00000004)) {
          siteTypes_ = new java.util.ArrayList<java.lang.Integer>(siteTypes_);
          bitField0_ |= 0x00000004;
        }
      }
      /**
       * <pre>
       * 站点类型
       * </pre>
       *
       * <code>repeated .rfid.SiteType SiteTypes = 3;</code>
       */
      public java.util.List<rfid.Rfid.SiteType> getSiteTypesList() {
        return new com.google.protobuf.Internal.ListAdapter<
            java.lang.Integer, rfid.Rfid.SiteType>(siteTypes_, siteTypes_converter_);
      }
      /**
       * <pre>
       * 站点类型
       * </pre>
       *
       * <code>repeated .rfid.SiteType SiteTypes = 3;</code>
       */
      public int getSiteTypesCount() {
        return siteTypes_.size();
      }
      /**
       * <pre>
       * 站点类型
       * </pre>
       *
       * <code>repeated .rfid.SiteType SiteTypes = 3;</code>
       */
      public rfid.Rfid.SiteType getSiteTypes(int index) {
        return siteTypes_converter_.convert(siteTypes_.get(index));
      }
      /**
       * <pre>
       * 站点类型
       * </pre>
       *
       * <code>repeated .rfid.SiteType SiteTypes = 3;</code>
       */
      public Builder setSiteTypes(
          int index, rfid.Rfid.SiteType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureSiteTypesIsMutable();
        siteTypes_.set(index, value.getNumber());
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 站点类型
       * </pre>
       *
       * <code>repeated .rfid.SiteType SiteTypes = 3;</code>
       */
      public Builder addSiteTypes(rfid.Rfid.SiteType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureSiteTypesIsMutable();
        siteTypes_.add(value.getNumber());
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 站点类型
       * </pre>
       *
       * <code>repeated .rfid.SiteType SiteTypes = 3;</code>
       */
      public Builder addAllSiteTypes(
          java.lang.Iterable<? extends rfid.Rfid.SiteType> values) {
        ensureSiteTypesIsMutable();
        for (rfid.Rfid.SiteType value : values) {
          siteTypes_.add(value.getNumber());
        }
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 站点类型
       * </pre>
       *
       * <code>repeated .rfid.SiteType SiteTypes = 3;</code>
       */
      public Builder clearSiteTypes() {
        siteTypes_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 站点类型
       * </pre>
       *
       * <code>repeated .rfid.SiteType SiteTypes = 3;</code>
       */
      public java.util.List<java.lang.Integer>
      getSiteTypesValueList() {
        return java.util.Collections.unmodifiableList(siteTypes_);
      }
      /**
       * <pre>
       * 站点类型
       * </pre>
       *
       * <code>repeated .rfid.SiteType SiteTypes = 3;</code>
       */
      public int getSiteTypesValue(int index) {
        return siteTypes_.get(index);
      }
      /**
       * <pre>
       * 站点类型
       * </pre>
       *
       * <code>repeated .rfid.SiteType SiteTypes = 3;</code>
       */
      public Builder setSiteTypesValue(
          int index, int value) {
        ensureSiteTypesIsMutable();
        siteTypes_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 站点类型
       * </pre>
       *
       * <code>repeated .rfid.SiteType SiteTypes = 3;</code>
       */
      public Builder addSiteTypesValue(int value) {
        ensureSiteTypesIsMutable();
        siteTypes_.add(value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 站点类型
       * </pre>
       *
       * <code>repeated .rfid.SiteType SiteTypes = 3;</code>
       */
      public Builder addAllSiteTypesValue(
          java.lang.Iterable<java.lang.Integer> values) {
        ensureSiteTypesIsMutable();
        for (int value : values) {
          siteTypes_.add(value);
        }
        onChanged();
        return this;
      }

      private java.lang.Object rPCAddr_ = "";
      /**
       * <pre>
       * RPC地址
       * </pre>
       *
       * <code>string RPCAddr = 4;</code>
       */
      public java.lang.String getRPCAddr() {
        java.lang.Object ref = rPCAddr_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          rPCAddr_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * RPC地址
       * </pre>
       *
       * <code>string RPCAddr = 4;</code>
       */
      public com.google.protobuf.ByteString
          getRPCAddrBytes() {
        java.lang.Object ref = rPCAddr_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          rPCAddr_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * RPC地址
       * </pre>
       *
       * <code>string RPCAddr = 4;</code>
       */
      public Builder setRPCAddr(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        rPCAddr_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * RPC地址
       * </pre>
       *
       * <code>string RPCAddr = 4;</code>
       */
      public Builder clearRPCAddr() {
        
        rPCAddr_ = getDefaultInstance().getRPCAddr();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * RPC地址
       * </pre>
       *
       * <code>string RPCAddr = 4;</code>
       */
      public Builder setRPCAddrBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        rPCAddr_ = value;
        onChanged();
        return this;
      }

      private com.google.protobuf.ByteString publicKey_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <pre>
       * 公钥
       * </pre>
       *
       * <code>bytes PublicKey = 5;</code>
       */
      public com.google.protobuf.ByteString getPublicKey() {
        return publicKey_;
      }
      /**
       * <pre>
       * 公钥
       * </pre>
       *
       * <code>bytes PublicKey = 5;</code>
       */
      public Builder setPublicKey(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        publicKey_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 公钥
       * </pre>
       *
       * <code>bytes PublicKey = 5;</code>
       */
      public Builder clearPublicKey() {
        
        publicKey_ = getDefaultInstance().getPublicKey();
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFieldsProto3(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:rfid.RegisterParam)
    }

    // @@protoc_insertion_point(class_scope:rfid.RegisterParam)
    private static final rfid.Rfid.RegisterParam DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new rfid.Rfid.RegisterParam();
    }

    public static rfid.Rfid.RegisterParam getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<RegisterParam>
        PARSER = new com.google.protobuf.AbstractParser<RegisterParam>() {
      @java.lang.Override
      public RegisterParam parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new RegisterParam(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<RegisterParam> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<RegisterParam> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public rfid.Rfid.RegisterParam getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface RegisterReplyOrBuilder extends
      // @@protoc_insertion_point(interface_extends:rfid.RegisterReply)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>.rfid.BaseReply BaseInfo = 1;</code>
     */
    boolean hasBaseInfo();
    /**
     * <code>.rfid.BaseReply BaseInfo = 1;</code>
     */
    rfid.Rfid.BaseReply getBaseInfo();
    /**
     * <code>.rfid.BaseReply BaseInfo = 1;</code>
     */
    rfid.Rfid.BaseReplyOrBuilder getBaseInfoOrBuilder();

    /**
     * <code>bytes PublicKey = 2;</code>
     */
    com.google.protobuf.ByteString getPublicKey();
  }
  /**
   * Protobuf type {@code rfid.RegisterReply}
   */
  public  static final class RegisterReply extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:rfid.RegisterReply)
      RegisterReplyOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use RegisterReply.newBuilder() to construct.
    private RegisterReply(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private RegisterReply() {
      publicKey_ = com.google.protobuf.ByteString.EMPTY;
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private RegisterReply(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              rfid.Rfid.BaseReply.Builder subBuilder = null;
              if (baseInfo_ != null) {
                subBuilder = baseInfo_.toBuilder();
              }
              baseInfo_ = input.readMessage(rfid.Rfid.BaseReply.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(baseInfo_);
                baseInfo_ = subBuilder.buildPartial();
              }

              break;
            }
            case 18: {

              publicKey_ = input.readBytes();
              break;
            }
            default: {
              if (!parseUnknownFieldProto3(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return rfid.Rfid.internal_static_rfid_RegisterReply_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return rfid.Rfid.internal_static_rfid_RegisterReply_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              rfid.Rfid.RegisterReply.class, rfid.Rfid.RegisterReply.Builder.class);
    }

    public static final int BASEINFO_FIELD_NUMBER = 1;
    private rfid.Rfid.BaseReply baseInfo_;
    /**
     * <code>.rfid.BaseReply BaseInfo = 1;</code>
     */
    public boolean hasBaseInfo() {
      return baseInfo_ != null;
    }
    /**
     * <code>.rfid.BaseReply BaseInfo = 1;</code>
     */
    public rfid.Rfid.BaseReply getBaseInfo() {
      return baseInfo_ == null ? rfid.Rfid.BaseReply.getDefaultInstance() : baseInfo_;
    }
    /**
     * <code>.rfid.BaseReply BaseInfo = 1;</code>
     */
    public rfid.Rfid.BaseReplyOrBuilder getBaseInfoOrBuilder() {
      return getBaseInfo();
    }

    public static final int PUBLICKEY_FIELD_NUMBER = 2;
    private com.google.protobuf.ByteString publicKey_;
    /**
     * <code>bytes PublicKey = 2;</code>
     */
    public com.google.protobuf.ByteString getPublicKey() {
      return publicKey_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (baseInfo_ != null) {
        output.writeMessage(1, getBaseInfo());
      }
      if (!publicKey_.isEmpty()) {
        output.writeBytes(2, publicKey_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (baseInfo_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getBaseInfo());
      }
      if (!publicKey_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(2, publicKey_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof rfid.Rfid.RegisterReply)) {
        return super.equals(obj);
      }
      rfid.Rfid.RegisterReply other = (rfid.Rfid.RegisterReply) obj;

      boolean result = true;
      result = result && (hasBaseInfo() == other.hasBaseInfo());
      if (hasBaseInfo()) {
        result = result && getBaseInfo()
            .equals(other.getBaseInfo());
      }
      result = result && getPublicKey()
          .equals(other.getPublicKey());
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasBaseInfo()) {
        hash = (37 * hash) + BASEINFO_FIELD_NUMBER;
        hash = (53 * hash) + getBaseInfo().hashCode();
      }
      hash = (37 * hash) + PUBLICKEY_FIELD_NUMBER;
      hash = (53 * hash) + getPublicKey().hashCode();
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static rfid.Rfid.RegisterReply parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static rfid.Rfid.RegisterReply parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static rfid.Rfid.RegisterReply parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static rfid.Rfid.RegisterReply parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static rfid.Rfid.RegisterReply parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static rfid.Rfid.RegisterReply parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static rfid.Rfid.RegisterReply parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static rfid.Rfid.RegisterReply parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static rfid.Rfid.RegisterReply parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static rfid.Rfid.RegisterReply parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static rfid.Rfid.RegisterReply parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static rfid.Rfid.RegisterReply parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(rfid.Rfid.RegisterReply prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code rfid.RegisterReply}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:rfid.RegisterReply)
        rfid.Rfid.RegisterReplyOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return rfid.Rfid.internal_static_rfid_RegisterReply_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return rfid.Rfid.internal_static_rfid_RegisterReply_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                rfid.Rfid.RegisterReply.class, rfid.Rfid.RegisterReply.Builder.class);
      }

      // Construct using rfid.Rfid.RegisterReply.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        if (baseInfoBuilder_ == null) {
          baseInfo_ = null;
        } else {
          baseInfo_ = null;
          baseInfoBuilder_ = null;
        }
        publicKey_ = com.google.protobuf.ByteString.EMPTY;

        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return rfid.Rfid.internal_static_rfid_RegisterReply_descriptor;
      }

      @java.lang.Override
      public rfid.Rfid.RegisterReply getDefaultInstanceForType() {
        return rfid.Rfid.RegisterReply.getDefaultInstance();
      }

      @java.lang.Override
      public rfid.Rfid.RegisterReply build() {
        rfid.Rfid.RegisterReply result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public rfid.Rfid.RegisterReply buildPartial() {
        rfid.Rfid.RegisterReply result = new rfid.Rfid.RegisterReply(this);
        if (baseInfoBuilder_ == null) {
          result.baseInfo_ = baseInfo_;
        } else {
          result.baseInfo_ = baseInfoBuilder_.build();
        }
        result.publicKey_ = publicKey_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return (Builder) super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof rfid.Rfid.RegisterReply) {
          return mergeFrom((rfid.Rfid.RegisterReply)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(rfid.Rfid.RegisterReply other) {
        if (other == rfid.Rfid.RegisterReply.getDefaultInstance()) return this;
        if (other.hasBaseInfo()) {
          mergeBaseInfo(other.getBaseInfo());
        }
        if (other.getPublicKey() != com.google.protobuf.ByteString.EMPTY) {
          setPublicKey(other.getPublicKey());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        rfid.Rfid.RegisterReply parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (rfid.Rfid.RegisterReply) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private rfid.Rfid.BaseReply baseInfo_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          rfid.Rfid.BaseReply, rfid.Rfid.BaseReply.Builder, rfid.Rfid.BaseReplyOrBuilder> baseInfoBuilder_;
      /**
       * <code>.rfid.BaseReply BaseInfo = 1;</code>
       */
      public boolean hasBaseInfo() {
        return baseInfoBuilder_ != null || baseInfo_ != null;
      }
      /**
       * <code>.rfid.BaseReply BaseInfo = 1;</code>
       */
      public rfid.Rfid.BaseReply getBaseInfo() {
        if (baseInfoBuilder_ == null) {
          return baseInfo_ == null ? rfid.Rfid.BaseReply.getDefaultInstance() : baseInfo_;
        } else {
          return baseInfoBuilder_.getMessage();
        }
      }
      /**
       * <code>.rfid.BaseReply BaseInfo = 1;</code>
       */
      public Builder setBaseInfo(rfid.Rfid.BaseReply value) {
        if (baseInfoBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          baseInfo_ = value;
          onChanged();
        } else {
          baseInfoBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <code>.rfid.BaseReply BaseInfo = 1;</code>
       */
      public Builder setBaseInfo(
          rfid.Rfid.BaseReply.Builder builderForValue) {
        if (baseInfoBuilder_ == null) {
          baseInfo_ = builderForValue.build();
          onChanged();
        } else {
          baseInfoBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <code>.rfid.BaseReply BaseInfo = 1;</code>
       */
      public Builder mergeBaseInfo(rfid.Rfid.BaseReply value) {
        if (baseInfoBuilder_ == null) {
          if (baseInfo_ != null) {
            baseInfo_ =
              rfid.Rfid.BaseReply.newBuilder(baseInfo_).mergeFrom(value).buildPartial();
          } else {
            baseInfo_ = value;
          }
          onChanged();
        } else {
          baseInfoBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <code>.rfid.BaseReply BaseInfo = 1;</code>
       */
      public Builder clearBaseInfo() {
        if (baseInfoBuilder_ == null) {
          baseInfo_ = null;
          onChanged();
        } else {
          baseInfo_ = null;
          baseInfoBuilder_ = null;
        }

        return this;
      }
      /**
       * <code>.rfid.BaseReply BaseInfo = 1;</code>
       */
      public rfid.Rfid.BaseReply.Builder getBaseInfoBuilder() {
        
        onChanged();
        return getBaseInfoFieldBuilder().getBuilder();
      }
      /**
       * <code>.rfid.BaseReply BaseInfo = 1;</code>
       */
      public rfid.Rfid.BaseReplyOrBuilder getBaseInfoOrBuilder() {
        if (baseInfoBuilder_ != null) {
          return baseInfoBuilder_.getMessageOrBuilder();
        } else {
          return baseInfo_ == null ?
              rfid.Rfid.BaseReply.getDefaultInstance() : baseInfo_;
        }
      }
      /**
       * <code>.rfid.BaseReply BaseInfo = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          rfid.Rfid.BaseReply, rfid.Rfid.BaseReply.Builder, rfid.Rfid.BaseReplyOrBuilder> 
          getBaseInfoFieldBuilder() {
        if (baseInfoBuilder_ == null) {
          baseInfoBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              rfid.Rfid.BaseReply, rfid.Rfid.BaseReply.Builder, rfid.Rfid.BaseReplyOrBuilder>(
                  getBaseInfo(),
                  getParentForChildren(),
                  isClean());
          baseInfo_ = null;
        }
        return baseInfoBuilder_;
      }

      private com.google.protobuf.ByteString publicKey_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <code>bytes PublicKey = 2;</code>
       */
      public com.google.protobuf.ByteString getPublicKey() {
        return publicKey_;
      }
      /**
       * <code>bytes PublicKey = 2;</code>
       */
      public Builder setPublicKey(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        publicKey_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>bytes PublicKey = 2;</code>
       */
      public Builder clearPublicKey() {
        
        publicKey_ = getDefaultInstance().getPublicKey();
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFieldsProto3(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:rfid.RegisterReply)
    }

    // @@protoc_insertion_point(class_scope:rfid.RegisterReply)
    private static final rfid.Rfid.RegisterReply DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new rfid.Rfid.RegisterReply();
    }

    public static rfid.Rfid.RegisterReply getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<RegisterReply>
        PARSER = new com.google.protobuf.AbstractParser<RegisterReply>() {
      @java.lang.Override
      public RegisterReply parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new RegisterReply(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<RegisterReply> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<RegisterReply> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public rfid.Rfid.RegisterReply getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface RFIDInfoOrBuilder extends
      // @@protoc_insertion_point(interface_extends:rfid.RFIDInfo)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>.rfid.BaseReply BaseInfo = 1;</code>
     */
    boolean hasBaseInfo();
    /**
     * <code>.rfid.BaseReply BaseInfo = 1;</code>
     */
    rfid.Rfid.BaseReply getBaseInfo();
    /**
     * <code>.rfid.BaseReply BaseInfo = 1;</code>
     */
    rfid.Rfid.BaseReplyOrBuilder getBaseInfoOrBuilder();

    /**
     * <pre>
     * USER区域存储的ID
     * </pre>
     *
     * <code>int64 Id = 2;</code>
     */
    long getId();

    /**
     * <code>string EPC = 3;</code>
     */
    java.lang.String getEPC();
    /**
     * <code>string EPC = 3;</code>
     */
    com.google.protobuf.ByteString
        getEPCBytes();

    /**
     * <code>int64 FactoryId = 4;</code>
     */
    long getFactoryId();
  }
  /**
   * <pre>
   * RFID 的EPC和USER区域储存ID对比
   * </pre>
   *
   * Protobuf type {@code rfid.RFIDInfo}
   */
  public  static final class RFIDInfo extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:rfid.RFIDInfo)
      RFIDInfoOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use RFIDInfo.newBuilder() to construct.
    private RFIDInfo(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private RFIDInfo() {
      id_ = 0L;
      ePC_ = "";
      factoryId_ = 0L;
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private RFIDInfo(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              rfid.Rfid.BaseReply.Builder subBuilder = null;
              if (baseInfo_ != null) {
                subBuilder = baseInfo_.toBuilder();
              }
              baseInfo_ = input.readMessage(rfid.Rfid.BaseReply.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(baseInfo_);
                baseInfo_ = subBuilder.buildPartial();
              }

              break;
            }
            case 16: {

              id_ = input.readInt64();
              break;
            }
            case 26: {
              java.lang.String s = input.readStringRequireUtf8();

              ePC_ = s;
              break;
            }
            case 32: {

              factoryId_ = input.readInt64();
              break;
            }
            default: {
              if (!parseUnknownFieldProto3(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return rfid.Rfid.internal_static_rfid_RFIDInfo_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return rfid.Rfid.internal_static_rfid_RFIDInfo_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              rfid.Rfid.RFIDInfo.class, rfid.Rfid.RFIDInfo.Builder.class);
    }

    public static final int BASEINFO_FIELD_NUMBER = 1;
    private rfid.Rfid.BaseReply baseInfo_;
    /**
     * <code>.rfid.BaseReply BaseInfo = 1;</code>
     */
    public boolean hasBaseInfo() {
      return baseInfo_ != null;
    }
    /**
     * <code>.rfid.BaseReply BaseInfo = 1;</code>
     */
    public rfid.Rfid.BaseReply getBaseInfo() {
      return baseInfo_ == null ? rfid.Rfid.BaseReply.getDefaultInstance() : baseInfo_;
    }
    /**
     * <code>.rfid.BaseReply BaseInfo = 1;</code>
     */
    public rfid.Rfid.BaseReplyOrBuilder getBaseInfoOrBuilder() {
      return getBaseInfo();
    }

    public static final int ID_FIELD_NUMBER = 2;
    private long id_;
    /**
     * <pre>
     * USER区域存储的ID
     * </pre>
     *
     * <code>int64 Id = 2;</code>
     */
    public long getId() {
      return id_;
    }

    public static final int EPC_FIELD_NUMBER = 3;
    private volatile java.lang.Object ePC_;
    /**
     * <code>string EPC = 3;</code>
     */
    public java.lang.String getEPC() {
      java.lang.Object ref = ePC_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        ePC_ = s;
        return s;
      }
    }
    /**
     * <code>string EPC = 3;</code>
     */
    public com.google.protobuf.ByteString
        getEPCBytes() {
      java.lang.Object ref = ePC_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        ePC_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int FACTORYID_FIELD_NUMBER = 4;
    private long factoryId_;
    /**
     * <code>int64 FactoryId = 4;</code>
     */
    public long getFactoryId() {
      return factoryId_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (baseInfo_ != null) {
        output.writeMessage(1, getBaseInfo());
      }
      if (id_ != 0L) {
        output.writeInt64(2, id_);
      }
      if (!getEPCBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 3, ePC_);
      }
      if (factoryId_ != 0L) {
        output.writeInt64(4, factoryId_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (baseInfo_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getBaseInfo());
      }
      if (id_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(2, id_);
      }
      if (!getEPCBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(3, ePC_);
      }
      if (factoryId_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(4, factoryId_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof rfid.Rfid.RFIDInfo)) {
        return super.equals(obj);
      }
      rfid.Rfid.RFIDInfo other = (rfid.Rfid.RFIDInfo) obj;

      boolean result = true;
      result = result && (hasBaseInfo() == other.hasBaseInfo());
      if (hasBaseInfo()) {
        result = result && getBaseInfo()
            .equals(other.getBaseInfo());
      }
      result = result && (getId()
          == other.getId());
      result = result && getEPC()
          .equals(other.getEPC());
      result = result && (getFactoryId()
          == other.getFactoryId());
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasBaseInfo()) {
        hash = (37 * hash) + BASEINFO_FIELD_NUMBER;
        hash = (53 * hash) + getBaseInfo().hashCode();
      }
      hash = (37 * hash) + ID_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getId());
      hash = (37 * hash) + EPC_FIELD_NUMBER;
      hash = (53 * hash) + getEPC().hashCode();
      hash = (37 * hash) + FACTORYID_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getFactoryId());
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static rfid.Rfid.RFIDInfo parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static rfid.Rfid.RFIDInfo parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static rfid.Rfid.RFIDInfo parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static rfid.Rfid.RFIDInfo parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static rfid.Rfid.RFIDInfo parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static rfid.Rfid.RFIDInfo parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static rfid.Rfid.RFIDInfo parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static rfid.Rfid.RFIDInfo parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static rfid.Rfid.RFIDInfo parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static rfid.Rfid.RFIDInfo parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static rfid.Rfid.RFIDInfo parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static rfid.Rfid.RFIDInfo parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(rfid.Rfid.RFIDInfo prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * RFID 的EPC和USER区域储存ID对比
     * </pre>
     *
     * Protobuf type {@code rfid.RFIDInfo}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:rfid.RFIDInfo)
        rfid.Rfid.RFIDInfoOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return rfid.Rfid.internal_static_rfid_RFIDInfo_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return rfid.Rfid.internal_static_rfid_RFIDInfo_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                rfid.Rfid.RFIDInfo.class, rfid.Rfid.RFIDInfo.Builder.class);
      }

      // Construct using rfid.Rfid.RFIDInfo.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        if (baseInfoBuilder_ == null) {
          baseInfo_ = null;
        } else {
          baseInfo_ = null;
          baseInfoBuilder_ = null;
        }
        id_ = 0L;

        ePC_ = "";

        factoryId_ = 0L;

        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return rfid.Rfid.internal_static_rfid_RFIDInfo_descriptor;
      }

      @java.lang.Override
      public rfid.Rfid.RFIDInfo getDefaultInstanceForType() {
        return rfid.Rfid.RFIDInfo.getDefaultInstance();
      }

      @java.lang.Override
      public rfid.Rfid.RFIDInfo build() {
        rfid.Rfid.RFIDInfo result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public rfid.Rfid.RFIDInfo buildPartial() {
        rfid.Rfid.RFIDInfo result = new rfid.Rfid.RFIDInfo(this);
        if (baseInfoBuilder_ == null) {
          result.baseInfo_ = baseInfo_;
        } else {
          result.baseInfo_ = baseInfoBuilder_.build();
        }
        result.id_ = id_;
        result.ePC_ = ePC_;
        result.factoryId_ = factoryId_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return (Builder) super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof rfid.Rfid.RFIDInfo) {
          return mergeFrom((rfid.Rfid.RFIDInfo)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(rfid.Rfid.RFIDInfo other) {
        if (other == rfid.Rfid.RFIDInfo.getDefaultInstance()) return this;
        if (other.hasBaseInfo()) {
          mergeBaseInfo(other.getBaseInfo());
        }
        if (other.getId() != 0L) {
          setId(other.getId());
        }
        if (!other.getEPC().isEmpty()) {
          ePC_ = other.ePC_;
          onChanged();
        }
        if (other.getFactoryId() != 0L) {
          setFactoryId(other.getFactoryId());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        rfid.Rfid.RFIDInfo parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (rfid.Rfid.RFIDInfo) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private rfid.Rfid.BaseReply baseInfo_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          rfid.Rfid.BaseReply, rfid.Rfid.BaseReply.Builder, rfid.Rfid.BaseReplyOrBuilder> baseInfoBuilder_;
      /**
       * <code>.rfid.BaseReply BaseInfo = 1;</code>
       */
      public boolean hasBaseInfo() {
        return baseInfoBuilder_ != null || baseInfo_ != null;
      }
      /**
       * <code>.rfid.BaseReply BaseInfo = 1;</code>
       */
      public rfid.Rfid.BaseReply getBaseInfo() {
        if (baseInfoBuilder_ == null) {
          return baseInfo_ == null ? rfid.Rfid.BaseReply.getDefaultInstance() : baseInfo_;
        } else {
          return baseInfoBuilder_.getMessage();
        }
      }
      /**
       * <code>.rfid.BaseReply BaseInfo = 1;</code>
       */
      public Builder setBaseInfo(rfid.Rfid.BaseReply value) {
        if (baseInfoBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          baseInfo_ = value;
          onChanged();
        } else {
          baseInfoBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <code>.rfid.BaseReply BaseInfo = 1;</code>
       */
      public Builder setBaseInfo(
          rfid.Rfid.BaseReply.Builder builderForValue) {
        if (baseInfoBuilder_ == null) {
          baseInfo_ = builderForValue.build();
          onChanged();
        } else {
          baseInfoBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <code>.rfid.BaseReply BaseInfo = 1;</code>
       */
      public Builder mergeBaseInfo(rfid.Rfid.BaseReply value) {
        if (baseInfoBuilder_ == null) {
          if (baseInfo_ != null) {
            baseInfo_ =
              rfid.Rfid.BaseReply.newBuilder(baseInfo_).mergeFrom(value).buildPartial();
          } else {
            baseInfo_ = value;
          }
          onChanged();
        } else {
          baseInfoBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <code>.rfid.BaseReply BaseInfo = 1;</code>
       */
      public Builder clearBaseInfo() {
        if (baseInfoBuilder_ == null) {
          baseInfo_ = null;
          onChanged();
        } else {
          baseInfo_ = null;
          baseInfoBuilder_ = null;
        }

        return this;
      }
      /**
       * <code>.rfid.BaseReply BaseInfo = 1;</code>
       */
      public rfid.Rfid.BaseReply.Builder getBaseInfoBuilder() {
        
        onChanged();
        return getBaseInfoFieldBuilder().getBuilder();
      }
      /**
       * <code>.rfid.BaseReply BaseInfo = 1;</code>
       */
      public rfid.Rfid.BaseReplyOrBuilder getBaseInfoOrBuilder() {
        if (baseInfoBuilder_ != null) {
          return baseInfoBuilder_.getMessageOrBuilder();
        } else {
          return baseInfo_ == null ?
              rfid.Rfid.BaseReply.getDefaultInstance() : baseInfo_;
        }
      }
      /**
       * <code>.rfid.BaseReply BaseInfo = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          rfid.Rfid.BaseReply, rfid.Rfid.BaseReply.Builder, rfid.Rfid.BaseReplyOrBuilder> 
          getBaseInfoFieldBuilder() {
        if (baseInfoBuilder_ == null) {
          baseInfoBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              rfid.Rfid.BaseReply, rfid.Rfid.BaseReply.Builder, rfid.Rfid.BaseReplyOrBuilder>(
                  getBaseInfo(),
                  getParentForChildren(),
                  isClean());
          baseInfo_ = null;
        }
        return baseInfoBuilder_;
      }

      private long id_ ;
      /**
       * <pre>
       * USER区域存储的ID
       * </pre>
       *
       * <code>int64 Id = 2;</code>
       */
      public long getId() {
        return id_;
      }
      /**
       * <pre>
       * USER区域存储的ID
       * </pre>
       *
       * <code>int64 Id = 2;</code>
       */
      public Builder setId(long value) {
        
        id_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * USER区域存储的ID
       * </pre>
       *
       * <code>int64 Id = 2;</code>
       */
      public Builder clearId() {
        
        id_ = 0L;
        onChanged();
        return this;
      }

      private java.lang.Object ePC_ = "";
      /**
       * <code>string EPC = 3;</code>
       */
      public java.lang.String getEPC() {
        java.lang.Object ref = ePC_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          ePC_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>string EPC = 3;</code>
       */
      public com.google.protobuf.ByteString
          getEPCBytes() {
        java.lang.Object ref = ePC_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          ePC_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>string EPC = 3;</code>
       */
      public Builder setEPC(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        ePC_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>string EPC = 3;</code>
       */
      public Builder clearEPC() {
        
        ePC_ = getDefaultInstance().getEPC();
        onChanged();
        return this;
      }
      /**
       * <code>string EPC = 3;</code>
       */
      public Builder setEPCBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        ePC_ = value;
        onChanged();
        return this;
      }

      private long factoryId_ ;
      /**
       * <code>int64 FactoryId = 4;</code>
       */
      public long getFactoryId() {
        return factoryId_;
      }
      /**
       * <code>int64 FactoryId = 4;</code>
       */
      public Builder setFactoryId(long value) {
        
        factoryId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>int64 FactoryId = 4;</code>
       */
      public Builder clearFactoryId() {
        
        factoryId_ = 0L;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFieldsProto3(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:rfid.RFIDInfo)
    }

    // @@protoc_insertion_point(class_scope:rfid.RFIDInfo)
    private static final rfid.Rfid.RFIDInfo DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new rfid.Rfid.RFIDInfo();
    }

    public static rfid.Rfid.RFIDInfo getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<RFIDInfo>
        PARSER = new com.google.protobuf.AbstractParser<RFIDInfo>() {
      @java.lang.Override
      public RFIDInfo parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new RFIDInfo(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<RFIDInfo> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<RFIDInfo> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public rfid.Rfid.RFIDInfo getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface ReadParamOrBuilder extends
      // @@protoc_insertion_point(interface_extends:rfid.ReadParam)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>.rfid.BaseParam BaseInfo = 1;</code>
     */
    boolean hasBaseInfo();
    /**
     * <code>.rfid.BaseParam BaseInfo = 1;</code>
     */
    rfid.Rfid.BaseParam getBaseInfo();
    /**
     * <code>.rfid.BaseParam BaseInfo = 1;</code>
     */
    rfid.Rfid.BaseParamOrBuilder getBaseInfoOrBuilder();

    /**
     * <code>.rfid.OpCode OpType = 2;</code>
     */
    int getOpTypeValue();
    /**
     * <code>.rfid.OpCode OpType = 2;</code>
     */
    rfid.Rfid.OpCode getOpType();
  }
  /**
   * <pre>
   * 读RFID
   * </pre>
   *
   * Protobuf type {@code rfid.ReadParam}
   */
  public  static final class ReadParam extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:rfid.ReadParam)
      ReadParamOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use ReadParam.newBuilder() to construct.
    private ReadParam(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private ReadParam() {
      opType_ = 0;
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private ReadParam(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              rfid.Rfid.BaseParam.Builder subBuilder = null;
              if (baseInfo_ != null) {
                subBuilder = baseInfo_.toBuilder();
              }
              baseInfo_ = input.readMessage(rfid.Rfid.BaseParam.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(baseInfo_);
                baseInfo_ = subBuilder.buildPartial();
              }

              break;
            }
            case 16: {
              int rawValue = input.readEnum();

              opType_ = rawValue;
              break;
            }
            default: {
              if (!parseUnknownFieldProto3(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return rfid.Rfid.internal_static_rfid_ReadParam_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return rfid.Rfid.internal_static_rfid_ReadParam_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              rfid.Rfid.ReadParam.class, rfid.Rfid.ReadParam.Builder.class);
    }

    public static final int BASEINFO_FIELD_NUMBER = 1;
    private rfid.Rfid.BaseParam baseInfo_;
    /**
     * <code>.rfid.BaseParam BaseInfo = 1;</code>
     */
    public boolean hasBaseInfo() {
      return baseInfo_ != null;
    }
    /**
     * <code>.rfid.BaseParam BaseInfo = 1;</code>
     */
    public rfid.Rfid.BaseParam getBaseInfo() {
      return baseInfo_ == null ? rfid.Rfid.BaseParam.getDefaultInstance() : baseInfo_;
    }
    /**
     * <code>.rfid.BaseParam BaseInfo = 1;</code>
     */
    public rfid.Rfid.BaseParamOrBuilder getBaseInfoOrBuilder() {
      return getBaseInfo();
    }

    public static final int OPTYPE_FIELD_NUMBER = 2;
    private int opType_;
    /**
     * <code>.rfid.OpCode OpType = 2;</code>
     */
    public int getOpTypeValue() {
      return opType_;
    }
    /**
     * <code>.rfid.OpCode OpType = 2;</code>
     */
    public rfid.Rfid.OpCode getOpType() {
      @SuppressWarnings("deprecation")
      rfid.Rfid.OpCode result = rfid.Rfid.OpCode.valueOf(opType_);
      return result == null ? rfid.Rfid.OpCode.UNRECOGNIZED : result;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (baseInfo_ != null) {
        output.writeMessage(1, getBaseInfo());
      }
      if (opType_ != rfid.Rfid.OpCode.Start.getNumber()) {
        output.writeEnum(2, opType_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (baseInfo_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getBaseInfo());
      }
      if (opType_ != rfid.Rfid.OpCode.Start.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(2, opType_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof rfid.Rfid.ReadParam)) {
        return super.equals(obj);
      }
      rfid.Rfid.ReadParam other = (rfid.Rfid.ReadParam) obj;

      boolean result = true;
      result = result && (hasBaseInfo() == other.hasBaseInfo());
      if (hasBaseInfo()) {
        result = result && getBaseInfo()
            .equals(other.getBaseInfo());
      }
      result = result && opType_ == other.opType_;
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasBaseInfo()) {
        hash = (37 * hash) + BASEINFO_FIELD_NUMBER;
        hash = (53 * hash) + getBaseInfo().hashCode();
      }
      hash = (37 * hash) + OPTYPE_FIELD_NUMBER;
      hash = (53 * hash) + opType_;
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static rfid.Rfid.ReadParam parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static rfid.Rfid.ReadParam parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static rfid.Rfid.ReadParam parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static rfid.Rfid.ReadParam parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static rfid.Rfid.ReadParam parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static rfid.Rfid.ReadParam parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static rfid.Rfid.ReadParam parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static rfid.Rfid.ReadParam parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static rfid.Rfid.ReadParam parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static rfid.Rfid.ReadParam parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static rfid.Rfid.ReadParam parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static rfid.Rfid.ReadParam parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(rfid.Rfid.ReadParam prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * 读RFID
     * </pre>
     *
     * Protobuf type {@code rfid.ReadParam}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:rfid.ReadParam)
        rfid.Rfid.ReadParamOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return rfid.Rfid.internal_static_rfid_ReadParam_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return rfid.Rfid.internal_static_rfid_ReadParam_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                rfid.Rfid.ReadParam.class, rfid.Rfid.ReadParam.Builder.class);
      }

      // Construct using rfid.Rfid.ReadParam.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        if (baseInfoBuilder_ == null) {
          baseInfo_ = null;
        } else {
          baseInfo_ = null;
          baseInfoBuilder_ = null;
        }
        opType_ = 0;

        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return rfid.Rfid.internal_static_rfid_ReadParam_descriptor;
      }

      @java.lang.Override
      public rfid.Rfid.ReadParam getDefaultInstanceForType() {
        return rfid.Rfid.ReadParam.getDefaultInstance();
      }

      @java.lang.Override
      public rfid.Rfid.ReadParam build() {
        rfid.Rfid.ReadParam result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public rfid.Rfid.ReadParam buildPartial() {
        rfid.Rfid.ReadParam result = new rfid.Rfid.ReadParam(this);
        if (baseInfoBuilder_ == null) {
          result.baseInfo_ = baseInfo_;
        } else {
          result.baseInfo_ = baseInfoBuilder_.build();
        }
        result.opType_ = opType_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return (Builder) super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof rfid.Rfid.ReadParam) {
          return mergeFrom((rfid.Rfid.ReadParam)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(rfid.Rfid.ReadParam other) {
        if (other == rfid.Rfid.ReadParam.getDefaultInstance()) return this;
        if (other.hasBaseInfo()) {
          mergeBaseInfo(other.getBaseInfo());
        }
        if (other.opType_ != 0) {
          setOpTypeValue(other.getOpTypeValue());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        rfid.Rfid.ReadParam parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (rfid.Rfid.ReadParam) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private rfid.Rfid.BaseParam baseInfo_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          rfid.Rfid.BaseParam, rfid.Rfid.BaseParam.Builder, rfid.Rfid.BaseParamOrBuilder> baseInfoBuilder_;
      /**
       * <code>.rfid.BaseParam BaseInfo = 1;</code>
       */
      public boolean hasBaseInfo() {
        return baseInfoBuilder_ != null || baseInfo_ != null;
      }
      /**
       * <code>.rfid.BaseParam BaseInfo = 1;</code>
       */
      public rfid.Rfid.BaseParam getBaseInfo() {
        if (baseInfoBuilder_ == null) {
          return baseInfo_ == null ? rfid.Rfid.BaseParam.getDefaultInstance() : baseInfo_;
        } else {
          return baseInfoBuilder_.getMessage();
        }
      }
      /**
       * <code>.rfid.BaseParam BaseInfo = 1;</code>
       */
      public Builder setBaseInfo(rfid.Rfid.BaseParam value) {
        if (baseInfoBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          baseInfo_ = value;
          onChanged();
        } else {
          baseInfoBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <code>.rfid.BaseParam BaseInfo = 1;</code>
       */
      public Builder setBaseInfo(
          rfid.Rfid.BaseParam.Builder builderForValue) {
        if (baseInfoBuilder_ == null) {
          baseInfo_ = builderForValue.build();
          onChanged();
        } else {
          baseInfoBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <code>.rfid.BaseParam BaseInfo = 1;</code>
       */
      public Builder mergeBaseInfo(rfid.Rfid.BaseParam value) {
        if (baseInfoBuilder_ == null) {
          if (baseInfo_ != null) {
            baseInfo_ =
              rfid.Rfid.BaseParam.newBuilder(baseInfo_).mergeFrom(value).buildPartial();
          } else {
            baseInfo_ = value;
          }
          onChanged();
        } else {
          baseInfoBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <code>.rfid.BaseParam BaseInfo = 1;</code>
       */
      public Builder clearBaseInfo() {
        if (baseInfoBuilder_ == null) {
          baseInfo_ = null;
          onChanged();
        } else {
          baseInfo_ = null;
          baseInfoBuilder_ = null;
        }

        return this;
      }
      /**
       * <code>.rfid.BaseParam BaseInfo = 1;</code>
       */
      public rfid.Rfid.BaseParam.Builder getBaseInfoBuilder() {
        
        onChanged();
        return getBaseInfoFieldBuilder().getBuilder();
      }
      /**
       * <code>.rfid.BaseParam BaseInfo = 1;</code>
       */
      public rfid.Rfid.BaseParamOrBuilder getBaseInfoOrBuilder() {
        if (baseInfoBuilder_ != null) {
          return baseInfoBuilder_.getMessageOrBuilder();
        } else {
          return baseInfo_ == null ?
              rfid.Rfid.BaseParam.getDefaultInstance() : baseInfo_;
        }
      }
      /**
       * <code>.rfid.BaseParam BaseInfo = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          rfid.Rfid.BaseParam, rfid.Rfid.BaseParam.Builder, rfid.Rfid.BaseParamOrBuilder> 
          getBaseInfoFieldBuilder() {
        if (baseInfoBuilder_ == null) {
          baseInfoBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              rfid.Rfid.BaseParam, rfid.Rfid.BaseParam.Builder, rfid.Rfid.BaseParamOrBuilder>(
                  getBaseInfo(),
                  getParentForChildren(),
                  isClean());
          baseInfo_ = null;
        }
        return baseInfoBuilder_;
      }

      private int opType_ = 0;
      /**
       * <code>.rfid.OpCode OpType = 2;</code>
       */
      public int getOpTypeValue() {
        return opType_;
      }
      /**
       * <code>.rfid.OpCode OpType = 2;</code>
       */
      public Builder setOpTypeValue(int value) {
        opType_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>.rfid.OpCode OpType = 2;</code>
       */
      public rfid.Rfid.OpCode getOpType() {
        @SuppressWarnings("deprecation")
        rfid.Rfid.OpCode result = rfid.Rfid.OpCode.valueOf(opType_);
        return result == null ? rfid.Rfid.OpCode.UNRECOGNIZED : result;
      }
      /**
       * <code>.rfid.OpCode OpType = 2;</code>
       */
      public Builder setOpType(rfid.Rfid.OpCode value) {
        if (value == null) {
          throw new NullPointerException();
        }
        
        opType_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <code>.rfid.OpCode OpType = 2;</code>
       */
      public Builder clearOpType() {
        
        opType_ = 0;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFieldsProto3(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:rfid.ReadParam)
    }

    // @@protoc_insertion_point(class_scope:rfid.ReadParam)
    private static final rfid.Rfid.ReadParam DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new rfid.Rfid.ReadParam();
    }

    public static rfid.Rfid.ReadParam getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<ReadParam>
        PARSER = new com.google.protobuf.AbstractParser<ReadParam>() {
      @java.lang.Override
      public ReadParam parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new ReadParam(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<ReadParam> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<ReadParam> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public rfid.Rfid.ReadParam getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface ReadReplyOrBuilder extends
      // @@protoc_insertion_point(interface_extends:rfid.ReadReply)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>.rfid.BaseReply BaseInfo = 1;</code>
     */
    boolean hasBaseInfo();
    /**
     * <code>.rfid.BaseReply BaseInfo = 1;</code>
     */
    rfid.Rfid.BaseReply getBaseInfo();
    /**
     * <code>.rfid.BaseReply BaseInfo = 1;</code>
     */
    rfid.Rfid.BaseReplyOrBuilder getBaseInfoOrBuilder();

    /**
     * <code>repeated .rfid.RFIDInfo List = 2;</code>
     */
    java.util.List<rfid.Rfid.RFIDInfo> 
        getListList();
    /**
     * <code>repeated .rfid.RFIDInfo List = 2;</code>
     */
    rfid.Rfid.RFIDInfo getList(int index);
    /**
     * <code>repeated .rfid.RFIDInfo List = 2;</code>
     */
    int getListCount();
    /**
     * <code>repeated .rfid.RFIDInfo List = 2;</code>
     */
    java.util.List<? extends rfid.Rfid.RFIDInfoOrBuilder> 
        getListOrBuilderList();
    /**
     * <code>repeated .rfid.RFIDInfo List = 2;</code>
     */
    rfid.Rfid.RFIDInfoOrBuilder getListOrBuilder(
        int index);

    /**
     * <code>int64 Count = 3;</code>
     */
    long getCount();
  }
  /**
   * Protobuf type {@code rfid.ReadReply}
   */
  public  static final class ReadReply extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:rfid.ReadReply)
      ReadReplyOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use ReadReply.newBuilder() to construct.
    private ReadReply(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private ReadReply() {
      list_ = java.util.Collections.emptyList();
      count_ = 0L;
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private ReadReply(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              rfid.Rfid.BaseReply.Builder subBuilder = null;
              if (baseInfo_ != null) {
                subBuilder = baseInfo_.toBuilder();
              }
              baseInfo_ = input.readMessage(rfid.Rfid.BaseReply.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(baseInfo_);
                baseInfo_ = subBuilder.buildPartial();
              }

              break;
            }
            case 18: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                list_ = new java.util.ArrayList<rfid.Rfid.RFIDInfo>();
                mutable_bitField0_ |= 0x00000002;
              }
              list_.add(
                  input.readMessage(rfid.Rfid.RFIDInfo.parser(), extensionRegistry));
              break;
            }
            case 24: {

              count_ = input.readInt64();
              break;
            }
            default: {
              if (!parseUnknownFieldProto3(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          list_ = java.util.Collections.unmodifiableList(list_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return rfid.Rfid.internal_static_rfid_ReadReply_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return rfid.Rfid.internal_static_rfid_ReadReply_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              rfid.Rfid.ReadReply.class, rfid.Rfid.ReadReply.Builder.class);
    }

    private int bitField0_;
    public static final int BASEINFO_FIELD_NUMBER = 1;
    private rfid.Rfid.BaseReply baseInfo_;
    /**
     * <code>.rfid.BaseReply BaseInfo = 1;</code>
     */
    public boolean hasBaseInfo() {
      return baseInfo_ != null;
    }
    /**
     * <code>.rfid.BaseReply BaseInfo = 1;</code>
     */
    public rfid.Rfid.BaseReply getBaseInfo() {
      return baseInfo_ == null ? rfid.Rfid.BaseReply.getDefaultInstance() : baseInfo_;
    }
    /**
     * <code>.rfid.BaseReply BaseInfo = 1;</code>
     */
    public rfid.Rfid.BaseReplyOrBuilder getBaseInfoOrBuilder() {
      return getBaseInfo();
    }

    public static final int LIST_FIELD_NUMBER = 2;
    private java.util.List<rfid.Rfid.RFIDInfo> list_;
    /**
     * <code>repeated .rfid.RFIDInfo List = 2;</code>
     */
    public java.util.List<rfid.Rfid.RFIDInfo> getListList() {
      return list_;
    }
    /**
     * <code>repeated .rfid.RFIDInfo List = 2;</code>
     */
    public java.util.List<? extends rfid.Rfid.RFIDInfoOrBuilder> 
        getListOrBuilderList() {
      return list_;
    }
    /**
     * <code>repeated .rfid.RFIDInfo List = 2;</code>
     */
    public int getListCount() {
      return list_.size();
    }
    /**
     * <code>repeated .rfid.RFIDInfo List = 2;</code>
     */
    public rfid.Rfid.RFIDInfo getList(int index) {
      return list_.get(index);
    }
    /**
     * <code>repeated .rfid.RFIDInfo List = 2;</code>
     */
    public rfid.Rfid.RFIDInfoOrBuilder getListOrBuilder(
        int index) {
      return list_.get(index);
    }

    public static final int COUNT_FIELD_NUMBER = 3;
    private long count_;
    /**
     * <code>int64 Count = 3;</code>
     */
    public long getCount() {
      return count_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (baseInfo_ != null) {
        output.writeMessage(1, getBaseInfo());
      }
      for (int i = 0; i < list_.size(); i++) {
        output.writeMessage(2, list_.get(i));
      }
      if (count_ != 0L) {
        output.writeInt64(3, count_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (baseInfo_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getBaseInfo());
      }
      for (int i = 0; i < list_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, list_.get(i));
      }
      if (count_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(3, count_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof rfid.Rfid.ReadReply)) {
        return super.equals(obj);
      }
      rfid.Rfid.ReadReply other = (rfid.Rfid.ReadReply) obj;

      boolean result = true;
      result = result && (hasBaseInfo() == other.hasBaseInfo());
      if (hasBaseInfo()) {
        result = result && getBaseInfo()
            .equals(other.getBaseInfo());
      }
      result = result && getListList()
          .equals(other.getListList());
      result = result && (getCount()
          == other.getCount());
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasBaseInfo()) {
        hash = (37 * hash) + BASEINFO_FIELD_NUMBER;
        hash = (53 * hash) + getBaseInfo().hashCode();
      }
      if (getListCount() > 0) {
        hash = (37 * hash) + LIST_FIELD_NUMBER;
        hash = (53 * hash) + getListList().hashCode();
      }
      hash = (37 * hash) + COUNT_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getCount());
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static rfid.Rfid.ReadReply parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static rfid.Rfid.ReadReply parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static rfid.Rfid.ReadReply parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static rfid.Rfid.ReadReply parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static rfid.Rfid.ReadReply parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static rfid.Rfid.ReadReply parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static rfid.Rfid.ReadReply parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static rfid.Rfid.ReadReply parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static rfid.Rfid.ReadReply parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static rfid.Rfid.ReadReply parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static rfid.Rfid.ReadReply parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static rfid.Rfid.ReadReply parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(rfid.Rfid.ReadReply prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code rfid.ReadReply}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:rfid.ReadReply)
        rfid.Rfid.ReadReplyOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return rfid.Rfid.internal_static_rfid_ReadReply_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return rfid.Rfid.internal_static_rfid_ReadReply_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                rfid.Rfid.ReadReply.class, rfid.Rfid.ReadReply.Builder.class);
      }

      // Construct using rfid.Rfid.ReadReply.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getListFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        if (baseInfoBuilder_ == null) {
          baseInfo_ = null;
        } else {
          baseInfo_ = null;
          baseInfoBuilder_ = null;
        }
        if (listBuilder_ == null) {
          list_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
        } else {
          listBuilder_.clear();
        }
        count_ = 0L;

        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return rfid.Rfid.internal_static_rfid_ReadReply_descriptor;
      }

      @java.lang.Override
      public rfid.Rfid.ReadReply getDefaultInstanceForType() {
        return rfid.Rfid.ReadReply.getDefaultInstance();
      }

      @java.lang.Override
      public rfid.Rfid.ReadReply build() {
        rfid.Rfid.ReadReply result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public rfid.Rfid.ReadReply buildPartial() {
        rfid.Rfid.ReadReply result = new rfid.Rfid.ReadReply(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (baseInfoBuilder_ == null) {
          result.baseInfo_ = baseInfo_;
        } else {
          result.baseInfo_ = baseInfoBuilder_.build();
        }
        if (listBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002)) {
            list_ = java.util.Collections.unmodifiableList(list_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.list_ = list_;
        } else {
          result.list_ = listBuilder_.build();
        }
        result.count_ = count_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return (Builder) super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof rfid.Rfid.ReadReply) {
          return mergeFrom((rfid.Rfid.ReadReply)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(rfid.Rfid.ReadReply other) {
        if (other == rfid.Rfid.ReadReply.getDefaultInstance()) return this;
        if (other.hasBaseInfo()) {
          mergeBaseInfo(other.getBaseInfo());
        }
        if (listBuilder_ == null) {
          if (!other.list_.isEmpty()) {
            if (list_.isEmpty()) {
              list_ = other.list_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensureListIsMutable();
              list_.addAll(other.list_);
            }
            onChanged();
          }
        } else {
          if (!other.list_.isEmpty()) {
            if (listBuilder_.isEmpty()) {
              listBuilder_.dispose();
              listBuilder_ = null;
              list_ = other.list_;
              bitField0_ = (bitField0_ & ~0x00000002);
              listBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getListFieldBuilder() : null;
            } else {
              listBuilder_.addAllMessages(other.list_);
            }
          }
        }
        if (other.getCount() != 0L) {
          setCount(other.getCount());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        rfid.Rfid.ReadReply parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (rfid.Rfid.ReadReply) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private rfid.Rfid.BaseReply baseInfo_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          rfid.Rfid.BaseReply, rfid.Rfid.BaseReply.Builder, rfid.Rfid.BaseReplyOrBuilder> baseInfoBuilder_;
      /**
       * <code>.rfid.BaseReply BaseInfo = 1;</code>
       */
      public boolean hasBaseInfo() {
        return baseInfoBuilder_ != null || baseInfo_ != null;
      }
      /**
       * <code>.rfid.BaseReply BaseInfo = 1;</code>
       */
      public rfid.Rfid.BaseReply getBaseInfo() {
        if (baseInfoBuilder_ == null) {
          return baseInfo_ == null ? rfid.Rfid.BaseReply.getDefaultInstance() : baseInfo_;
        } else {
          return baseInfoBuilder_.getMessage();
        }
      }
      /**
       * <code>.rfid.BaseReply BaseInfo = 1;</code>
       */
      public Builder setBaseInfo(rfid.Rfid.BaseReply value) {
        if (baseInfoBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          baseInfo_ = value;
          onChanged();
        } else {
          baseInfoBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <code>.rfid.BaseReply BaseInfo = 1;</code>
       */
      public Builder setBaseInfo(
          rfid.Rfid.BaseReply.Builder builderForValue) {
        if (baseInfoBuilder_ == null) {
          baseInfo_ = builderForValue.build();
          onChanged();
        } else {
          baseInfoBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <code>.rfid.BaseReply BaseInfo = 1;</code>
       */
      public Builder mergeBaseInfo(rfid.Rfid.BaseReply value) {
        if (baseInfoBuilder_ == null) {
          if (baseInfo_ != null) {
            baseInfo_ =
              rfid.Rfid.BaseReply.newBuilder(baseInfo_).mergeFrom(value).buildPartial();
          } else {
            baseInfo_ = value;
          }
          onChanged();
        } else {
          baseInfoBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <code>.rfid.BaseReply BaseInfo = 1;</code>
       */
      public Builder clearBaseInfo() {
        if (baseInfoBuilder_ == null) {
          baseInfo_ = null;
          onChanged();
        } else {
          baseInfo_ = null;
          baseInfoBuilder_ = null;
        }

        return this;
      }
      /**
       * <code>.rfid.BaseReply BaseInfo = 1;</code>
       */
      public rfid.Rfid.BaseReply.Builder getBaseInfoBuilder() {
        
        onChanged();
        return getBaseInfoFieldBuilder().getBuilder();
      }
      /**
       * <code>.rfid.BaseReply BaseInfo = 1;</code>
       */
      public rfid.Rfid.BaseReplyOrBuilder getBaseInfoOrBuilder() {
        if (baseInfoBuilder_ != null) {
          return baseInfoBuilder_.getMessageOrBuilder();
        } else {
          return baseInfo_ == null ?
              rfid.Rfid.BaseReply.getDefaultInstance() : baseInfo_;
        }
      }
      /**
       * <code>.rfid.BaseReply BaseInfo = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          rfid.Rfid.BaseReply, rfid.Rfid.BaseReply.Builder, rfid.Rfid.BaseReplyOrBuilder> 
          getBaseInfoFieldBuilder() {
        if (baseInfoBuilder_ == null) {
          baseInfoBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              rfid.Rfid.BaseReply, rfid.Rfid.BaseReply.Builder, rfid.Rfid.BaseReplyOrBuilder>(
                  getBaseInfo(),
                  getParentForChildren(),
                  isClean());
          baseInfo_ = null;
        }
        return baseInfoBuilder_;
      }

      private java.util.List<rfid.Rfid.RFIDInfo> list_ =
        java.util.Collections.emptyList();
      private void ensureListIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          list_ = new java.util.ArrayList<rfid.Rfid.RFIDInfo>(list_);
          bitField0_ |= 0x00000002;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          rfid.Rfid.RFIDInfo, rfid.Rfid.RFIDInfo.Builder, rfid.Rfid.RFIDInfoOrBuilder> listBuilder_;

      /**
       * <code>repeated .rfid.RFIDInfo List = 2;</code>
       */
      public java.util.List<rfid.Rfid.RFIDInfo> getListList() {
        if (listBuilder_ == null) {
          return java.util.Collections.unmodifiableList(list_);
        } else {
          return listBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .rfid.RFIDInfo List = 2;</code>
       */
      public int getListCount() {
        if (listBuilder_ == null) {
          return list_.size();
        } else {
          return listBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .rfid.RFIDInfo List = 2;</code>
       */
      public rfid.Rfid.RFIDInfo getList(int index) {
        if (listBuilder_ == null) {
          return list_.get(index);
        } else {
          return listBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .rfid.RFIDInfo List = 2;</code>
       */
      public Builder setList(
          int index, rfid.Rfid.RFIDInfo value) {
        if (listBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureListIsMutable();
          list_.set(index, value);
          onChanged();
        } else {
          listBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .rfid.RFIDInfo List = 2;</code>
       */
      public Builder setList(
          int index, rfid.Rfid.RFIDInfo.Builder builderForValue) {
        if (listBuilder_ == null) {
          ensureListIsMutable();
          list_.set(index, builderForValue.build());
          onChanged();
        } else {
          listBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .rfid.RFIDInfo List = 2;</code>
       */
      public Builder addList(rfid.Rfid.RFIDInfo value) {
        if (listBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureListIsMutable();
          list_.add(value);
          onChanged();
        } else {
          listBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .rfid.RFIDInfo List = 2;</code>
       */
      public Builder addList(
          int index, rfid.Rfid.RFIDInfo value) {
        if (listBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureListIsMutable();
          list_.add(index, value);
          onChanged();
        } else {
          listBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .rfid.RFIDInfo List = 2;</code>
       */
      public Builder addList(
          rfid.Rfid.RFIDInfo.Builder builderForValue) {
        if (listBuilder_ == null) {
          ensureListIsMutable();
          list_.add(builderForValue.build());
          onChanged();
        } else {
          listBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .rfid.RFIDInfo List = 2;</code>
       */
      public Builder addList(
          int index, rfid.Rfid.RFIDInfo.Builder builderForValue) {
        if (listBuilder_ == null) {
          ensureListIsMutable();
          list_.add(index, builderForValue.build());
          onChanged();
        } else {
          listBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .rfid.RFIDInfo List = 2;</code>
       */
      public Builder addAllList(
          java.lang.Iterable<? extends rfid.Rfid.RFIDInfo> values) {
        if (listBuilder_ == null) {
          ensureListIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, list_);
          onChanged();
        } else {
          listBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .rfid.RFIDInfo List = 2;</code>
       */
      public Builder clearList() {
        if (listBuilder_ == null) {
          list_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          listBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .rfid.RFIDInfo List = 2;</code>
       */
      public Builder removeList(int index) {
        if (listBuilder_ == null) {
          ensureListIsMutable();
          list_.remove(index);
          onChanged();
        } else {
          listBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .rfid.RFIDInfo List = 2;</code>
       */
      public rfid.Rfid.RFIDInfo.Builder getListBuilder(
          int index) {
        return getListFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .rfid.RFIDInfo List = 2;</code>
       */
      public rfid.Rfid.RFIDInfoOrBuilder getListOrBuilder(
          int index) {
        if (listBuilder_ == null) {
          return list_.get(index);  } else {
          return listBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .rfid.RFIDInfo List = 2;</code>
       */
      public java.util.List<? extends rfid.Rfid.RFIDInfoOrBuilder> 
           getListOrBuilderList() {
        if (listBuilder_ != null) {
          return listBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(list_);
        }
      }
      /**
       * <code>repeated .rfid.RFIDInfo List = 2;</code>
       */
      public rfid.Rfid.RFIDInfo.Builder addListBuilder() {
        return getListFieldBuilder().addBuilder(
            rfid.Rfid.RFIDInfo.getDefaultInstance());
      }
      /**
       * <code>repeated .rfid.RFIDInfo List = 2;</code>
       */
      public rfid.Rfid.RFIDInfo.Builder addListBuilder(
          int index) {
        return getListFieldBuilder().addBuilder(
            index, rfid.Rfid.RFIDInfo.getDefaultInstance());
      }
      /**
       * <code>repeated .rfid.RFIDInfo List = 2;</code>
       */
      public java.util.List<rfid.Rfid.RFIDInfo.Builder> 
           getListBuilderList() {
        return getListFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          rfid.Rfid.RFIDInfo, rfid.Rfid.RFIDInfo.Builder, rfid.Rfid.RFIDInfoOrBuilder> 
          getListFieldBuilder() {
        if (listBuilder_ == null) {
          listBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              rfid.Rfid.RFIDInfo, rfid.Rfid.RFIDInfo.Builder, rfid.Rfid.RFIDInfoOrBuilder>(
                  list_,
                  ((bitField0_ & 0x00000002) == 0x00000002),
                  getParentForChildren(),
                  isClean());
          list_ = null;
        }
        return listBuilder_;
      }

      private long count_ ;
      /**
       * <code>int64 Count = 3;</code>
       */
      public long getCount() {
        return count_;
      }
      /**
       * <code>int64 Count = 3;</code>
       */
      public Builder setCount(long value) {
        
        count_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>int64 Count = 3;</code>
       */
      public Builder clearCount() {
        
        count_ = 0L;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFieldsProto3(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:rfid.ReadReply)
    }

    // @@protoc_insertion_point(class_scope:rfid.ReadReply)
    private static final rfid.Rfid.ReadReply DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new rfid.Rfid.ReadReply();
    }

    public static rfid.Rfid.ReadReply getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<ReadReply>
        PARSER = new com.google.protobuf.AbstractParser<ReadReply>() {
      @java.lang.Override
      public ReadReply parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new ReadReply(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<ReadReply> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<ReadReply> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public rfid.Rfid.ReadReply getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface WriteParamOrBuilder extends
      // @@protoc_insertion_point(interface_extends:rfid.WriteParam)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>.rfid.BaseParam BaseInfo = 1;</code>
     */
    boolean hasBaseInfo();
    /**
     * <code>.rfid.BaseParam BaseInfo = 1;</code>
     */
    rfid.Rfid.BaseParam getBaseInfo();
    /**
     * <code>.rfid.BaseParam BaseInfo = 1;</code>
     */
    rfid.Rfid.BaseParamOrBuilder getBaseInfoOrBuilder();

    /**
     * <code>repeated .rfid.RFIDInfo List = 2;</code>
     */
    java.util.List<rfid.Rfid.RFIDInfo> 
        getListList();
    /**
     * <code>repeated .rfid.RFIDInfo List = 2;</code>
     */
    rfid.Rfid.RFIDInfo getList(int index);
    /**
     * <code>repeated .rfid.RFIDInfo List = 2;</code>
     */
    int getListCount();
    /**
     * <code>repeated .rfid.RFIDInfo List = 2;</code>
     */
    java.util.List<? extends rfid.Rfid.RFIDInfoOrBuilder> 
        getListOrBuilderList();
    /**
     * <code>repeated .rfid.RFIDInfo List = 2;</code>
     */
    rfid.Rfid.RFIDInfoOrBuilder getListOrBuilder(
        int index);

    /**
     * <code>.rfid.OpCode OpType = 3;</code>
     */
    int getOpTypeValue();
    /**
     * <code>.rfid.OpCode OpType = 3;</code>
     */
    rfid.Rfid.OpCode getOpType();
  }
  /**
   * <pre>
   * 写RFID
   * </pre>
   *
   * Protobuf type {@code rfid.WriteParam}
   */
  public  static final class WriteParam extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:rfid.WriteParam)
      WriteParamOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use WriteParam.newBuilder() to construct.
    private WriteParam(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private WriteParam() {
      list_ = java.util.Collections.emptyList();
      opType_ = 0;
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private WriteParam(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              rfid.Rfid.BaseParam.Builder subBuilder = null;
              if (baseInfo_ != null) {
                subBuilder = baseInfo_.toBuilder();
              }
              baseInfo_ = input.readMessage(rfid.Rfid.BaseParam.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(baseInfo_);
                baseInfo_ = subBuilder.buildPartial();
              }

              break;
            }
            case 18: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                list_ = new java.util.ArrayList<rfid.Rfid.RFIDInfo>();
                mutable_bitField0_ |= 0x00000002;
              }
              list_.add(
                  input.readMessage(rfid.Rfid.RFIDInfo.parser(), extensionRegistry));
              break;
            }
            case 24: {
              int rawValue = input.readEnum();

              opType_ = rawValue;
              break;
            }
            default: {
              if (!parseUnknownFieldProto3(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          list_ = java.util.Collections.unmodifiableList(list_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return rfid.Rfid.internal_static_rfid_WriteParam_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return rfid.Rfid.internal_static_rfid_WriteParam_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              rfid.Rfid.WriteParam.class, rfid.Rfid.WriteParam.Builder.class);
    }

    private int bitField0_;
    public static final int BASEINFO_FIELD_NUMBER = 1;
    private rfid.Rfid.BaseParam baseInfo_;
    /**
     * <code>.rfid.BaseParam BaseInfo = 1;</code>
     */
    public boolean hasBaseInfo() {
      return baseInfo_ != null;
    }
    /**
     * <code>.rfid.BaseParam BaseInfo = 1;</code>
     */
    public rfid.Rfid.BaseParam getBaseInfo() {
      return baseInfo_ == null ? rfid.Rfid.BaseParam.getDefaultInstance() : baseInfo_;
    }
    /**
     * <code>.rfid.BaseParam BaseInfo = 1;</code>
     */
    public rfid.Rfid.BaseParamOrBuilder getBaseInfoOrBuilder() {
      return getBaseInfo();
    }

    public static final int LIST_FIELD_NUMBER = 2;
    private java.util.List<rfid.Rfid.RFIDInfo> list_;
    /**
     * <code>repeated .rfid.RFIDInfo List = 2;</code>
     */
    public java.util.List<rfid.Rfid.RFIDInfo> getListList() {
      return list_;
    }
    /**
     * <code>repeated .rfid.RFIDInfo List = 2;</code>
     */
    public java.util.List<? extends rfid.Rfid.RFIDInfoOrBuilder> 
        getListOrBuilderList() {
      return list_;
    }
    /**
     * <code>repeated .rfid.RFIDInfo List = 2;</code>
     */
    public int getListCount() {
      return list_.size();
    }
    /**
     * <code>repeated .rfid.RFIDInfo List = 2;</code>
     */
    public rfid.Rfid.RFIDInfo getList(int index) {
      return list_.get(index);
    }
    /**
     * <code>repeated .rfid.RFIDInfo List = 2;</code>
     */
    public rfid.Rfid.RFIDInfoOrBuilder getListOrBuilder(
        int index) {
      return list_.get(index);
    }

    public static final int OPTYPE_FIELD_NUMBER = 3;
    private int opType_;
    /**
     * <code>.rfid.OpCode OpType = 3;</code>
     */
    public int getOpTypeValue() {
      return opType_;
    }
    /**
     * <code>.rfid.OpCode OpType = 3;</code>
     */
    public rfid.Rfid.OpCode getOpType() {
      @SuppressWarnings("deprecation")
      rfid.Rfid.OpCode result = rfid.Rfid.OpCode.valueOf(opType_);
      return result == null ? rfid.Rfid.OpCode.UNRECOGNIZED : result;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (baseInfo_ != null) {
        output.writeMessage(1, getBaseInfo());
      }
      for (int i = 0; i < list_.size(); i++) {
        output.writeMessage(2, list_.get(i));
      }
      if (opType_ != rfid.Rfid.OpCode.Start.getNumber()) {
        output.writeEnum(3, opType_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (baseInfo_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getBaseInfo());
      }
      for (int i = 0; i < list_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, list_.get(i));
      }
      if (opType_ != rfid.Rfid.OpCode.Start.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(3, opType_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof rfid.Rfid.WriteParam)) {
        return super.equals(obj);
      }
      rfid.Rfid.WriteParam other = (rfid.Rfid.WriteParam) obj;

      boolean result = true;
      result = result && (hasBaseInfo() == other.hasBaseInfo());
      if (hasBaseInfo()) {
        result = result && getBaseInfo()
            .equals(other.getBaseInfo());
      }
      result = result && getListList()
          .equals(other.getListList());
      result = result && opType_ == other.opType_;
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasBaseInfo()) {
        hash = (37 * hash) + BASEINFO_FIELD_NUMBER;
        hash = (53 * hash) + getBaseInfo().hashCode();
      }
      if (getListCount() > 0) {
        hash = (37 * hash) + LIST_FIELD_NUMBER;
        hash = (53 * hash) + getListList().hashCode();
      }
      hash = (37 * hash) + OPTYPE_FIELD_NUMBER;
      hash = (53 * hash) + opType_;
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static rfid.Rfid.WriteParam parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static rfid.Rfid.WriteParam parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static rfid.Rfid.WriteParam parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static rfid.Rfid.WriteParam parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static rfid.Rfid.WriteParam parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static rfid.Rfid.WriteParam parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static rfid.Rfid.WriteParam parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static rfid.Rfid.WriteParam parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static rfid.Rfid.WriteParam parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static rfid.Rfid.WriteParam parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static rfid.Rfid.WriteParam parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static rfid.Rfid.WriteParam parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(rfid.Rfid.WriteParam prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * 写RFID
     * </pre>
     *
     * Protobuf type {@code rfid.WriteParam}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:rfid.WriteParam)
        rfid.Rfid.WriteParamOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return rfid.Rfid.internal_static_rfid_WriteParam_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return rfid.Rfid.internal_static_rfid_WriteParam_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                rfid.Rfid.WriteParam.class, rfid.Rfid.WriteParam.Builder.class);
      }

      // Construct using rfid.Rfid.WriteParam.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getListFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        if (baseInfoBuilder_ == null) {
          baseInfo_ = null;
        } else {
          baseInfo_ = null;
          baseInfoBuilder_ = null;
        }
        if (listBuilder_ == null) {
          list_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
        } else {
          listBuilder_.clear();
        }
        opType_ = 0;

        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return rfid.Rfid.internal_static_rfid_WriteParam_descriptor;
      }

      @java.lang.Override
      public rfid.Rfid.WriteParam getDefaultInstanceForType() {
        return rfid.Rfid.WriteParam.getDefaultInstance();
      }

      @java.lang.Override
      public rfid.Rfid.WriteParam build() {
        rfid.Rfid.WriteParam result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public rfid.Rfid.WriteParam buildPartial() {
        rfid.Rfid.WriteParam result = new rfid.Rfid.WriteParam(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (baseInfoBuilder_ == null) {
          result.baseInfo_ = baseInfo_;
        } else {
          result.baseInfo_ = baseInfoBuilder_.build();
        }
        if (listBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002)) {
            list_ = java.util.Collections.unmodifiableList(list_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.list_ = list_;
        } else {
          result.list_ = listBuilder_.build();
        }
        result.opType_ = opType_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return (Builder) super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof rfid.Rfid.WriteParam) {
          return mergeFrom((rfid.Rfid.WriteParam)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(rfid.Rfid.WriteParam other) {
        if (other == rfid.Rfid.WriteParam.getDefaultInstance()) return this;
        if (other.hasBaseInfo()) {
          mergeBaseInfo(other.getBaseInfo());
        }
        if (listBuilder_ == null) {
          if (!other.list_.isEmpty()) {
            if (list_.isEmpty()) {
              list_ = other.list_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensureListIsMutable();
              list_.addAll(other.list_);
            }
            onChanged();
          }
        } else {
          if (!other.list_.isEmpty()) {
            if (listBuilder_.isEmpty()) {
              listBuilder_.dispose();
              listBuilder_ = null;
              list_ = other.list_;
              bitField0_ = (bitField0_ & ~0x00000002);
              listBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getListFieldBuilder() : null;
            } else {
              listBuilder_.addAllMessages(other.list_);
            }
          }
        }
        if (other.opType_ != 0) {
          setOpTypeValue(other.getOpTypeValue());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        rfid.Rfid.WriteParam parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (rfid.Rfid.WriteParam) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private rfid.Rfid.BaseParam baseInfo_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          rfid.Rfid.BaseParam, rfid.Rfid.BaseParam.Builder, rfid.Rfid.BaseParamOrBuilder> baseInfoBuilder_;
      /**
       * <code>.rfid.BaseParam BaseInfo = 1;</code>
       */
      public boolean hasBaseInfo() {
        return baseInfoBuilder_ != null || baseInfo_ != null;
      }
      /**
       * <code>.rfid.BaseParam BaseInfo = 1;</code>
       */
      public rfid.Rfid.BaseParam getBaseInfo() {
        if (baseInfoBuilder_ == null) {
          return baseInfo_ == null ? rfid.Rfid.BaseParam.getDefaultInstance() : baseInfo_;
        } else {
          return baseInfoBuilder_.getMessage();
        }
      }
      /**
       * <code>.rfid.BaseParam BaseInfo = 1;</code>
       */
      public Builder setBaseInfo(rfid.Rfid.BaseParam value) {
        if (baseInfoBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          baseInfo_ = value;
          onChanged();
        } else {
          baseInfoBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <code>.rfid.BaseParam BaseInfo = 1;</code>
       */
      public Builder setBaseInfo(
          rfid.Rfid.BaseParam.Builder builderForValue) {
        if (baseInfoBuilder_ == null) {
          baseInfo_ = builderForValue.build();
          onChanged();
        } else {
          baseInfoBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <code>.rfid.BaseParam BaseInfo = 1;</code>
       */
      public Builder mergeBaseInfo(rfid.Rfid.BaseParam value) {
        if (baseInfoBuilder_ == null) {
          if (baseInfo_ != null) {
            baseInfo_ =
              rfid.Rfid.BaseParam.newBuilder(baseInfo_).mergeFrom(value).buildPartial();
          } else {
            baseInfo_ = value;
          }
          onChanged();
        } else {
          baseInfoBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <code>.rfid.BaseParam BaseInfo = 1;</code>
       */
      public Builder clearBaseInfo() {
        if (baseInfoBuilder_ == null) {
          baseInfo_ = null;
          onChanged();
        } else {
          baseInfo_ = null;
          baseInfoBuilder_ = null;
        }

        return this;
      }
      /**
       * <code>.rfid.BaseParam BaseInfo = 1;</code>
       */
      public rfid.Rfid.BaseParam.Builder getBaseInfoBuilder() {
        
        onChanged();
        return getBaseInfoFieldBuilder().getBuilder();
      }
      /**
       * <code>.rfid.BaseParam BaseInfo = 1;</code>
       */
      public rfid.Rfid.BaseParamOrBuilder getBaseInfoOrBuilder() {
        if (baseInfoBuilder_ != null) {
          return baseInfoBuilder_.getMessageOrBuilder();
        } else {
          return baseInfo_ == null ?
              rfid.Rfid.BaseParam.getDefaultInstance() : baseInfo_;
        }
      }
      /**
       * <code>.rfid.BaseParam BaseInfo = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          rfid.Rfid.BaseParam, rfid.Rfid.BaseParam.Builder, rfid.Rfid.BaseParamOrBuilder> 
          getBaseInfoFieldBuilder() {
        if (baseInfoBuilder_ == null) {
          baseInfoBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              rfid.Rfid.BaseParam, rfid.Rfid.BaseParam.Builder, rfid.Rfid.BaseParamOrBuilder>(
                  getBaseInfo(),
                  getParentForChildren(),
                  isClean());
          baseInfo_ = null;
        }
        return baseInfoBuilder_;
      }

      private java.util.List<rfid.Rfid.RFIDInfo> list_ =
        java.util.Collections.emptyList();
      private void ensureListIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          list_ = new java.util.ArrayList<rfid.Rfid.RFIDInfo>(list_);
          bitField0_ |= 0x00000002;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          rfid.Rfid.RFIDInfo, rfid.Rfid.RFIDInfo.Builder, rfid.Rfid.RFIDInfoOrBuilder> listBuilder_;

      /**
       * <code>repeated .rfid.RFIDInfo List = 2;</code>
       */
      public java.util.List<rfid.Rfid.RFIDInfo> getListList() {
        if (listBuilder_ == null) {
          return java.util.Collections.unmodifiableList(list_);
        } else {
          return listBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .rfid.RFIDInfo List = 2;</code>
       */
      public int getListCount() {
        if (listBuilder_ == null) {
          return list_.size();
        } else {
          return listBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .rfid.RFIDInfo List = 2;</code>
       */
      public rfid.Rfid.RFIDInfo getList(int index) {
        if (listBuilder_ == null) {
          return list_.get(index);
        } else {
          return listBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .rfid.RFIDInfo List = 2;</code>
       */
      public Builder setList(
          int index, rfid.Rfid.RFIDInfo value) {
        if (listBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureListIsMutable();
          list_.set(index, value);
          onChanged();
        } else {
          listBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .rfid.RFIDInfo List = 2;</code>
       */
      public Builder setList(
          int index, rfid.Rfid.RFIDInfo.Builder builderForValue) {
        if (listBuilder_ == null) {
          ensureListIsMutable();
          list_.set(index, builderForValue.build());
          onChanged();
        } else {
          listBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .rfid.RFIDInfo List = 2;</code>
       */
      public Builder addList(rfid.Rfid.RFIDInfo value) {
        if (listBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureListIsMutable();
          list_.add(value);
          onChanged();
        } else {
          listBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .rfid.RFIDInfo List = 2;</code>
       */
      public Builder addList(
          int index, rfid.Rfid.RFIDInfo value) {
        if (listBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureListIsMutable();
          list_.add(index, value);
          onChanged();
        } else {
          listBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .rfid.RFIDInfo List = 2;</code>
       */
      public Builder addList(
          rfid.Rfid.RFIDInfo.Builder builderForValue) {
        if (listBuilder_ == null) {
          ensureListIsMutable();
          list_.add(builderForValue.build());
          onChanged();
        } else {
          listBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .rfid.RFIDInfo List = 2;</code>
       */
      public Builder addList(
          int index, rfid.Rfid.RFIDInfo.Builder builderForValue) {
        if (listBuilder_ == null) {
          ensureListIsMutable();
          list_.add(index, builderForValue.build());
          onChanged();
        } else {
          listBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .rfid.RFIDInfo List = 2;</code>
       */
      public Builder addAllList(
          java.lang.Iterable<? extends rfid.Rfid.RFIDInfo> values) {
        if (listBuilder_ == null) {
          ensureListIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, list_);
          onChanged();
        } else {
          listBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .rfid.RFIDInfo List = 2;</code>
       */
      public Builder clearList() {
        if (listBuilder_ == null) {
          list_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          listBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .rfid.RFIDInfo List = 2;</code>
       */
      public Builder removeList(int index) {
        if (listBuilder_ == null) {
          ensureListIsMutable();
          list_.remove(index);
          onChanged();
        } else {
          listBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .rfid.RFIDInfo List = 2;</code>
       */
      public rfid.Rfid.RFIDInfo.Builder getListBuilder(
          int index) {
        return getListFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .rfid.RFIDInfo List = 2;</code>
       */
      public rfid.Rfid.RFIDInfoOrBuilder getListOrBuilder(
          int index) {
        if (listBuilder_ == null) {
          return list_.get(index);  } else {
          return listBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .rfid.RFIDInfo List = 2;</code>
       */
      public java.util.List<? extends rfid.Rfid.RFIDInfoOrBuilder> 
           getListOrBuilderList() {
        if (listBuilder_ != null) {
          return listBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(list_);
        }
      }
      /**
       * <code>repeated .rfid.RFIDInfo List = 2;</code>
       */
      public rfid.Rfid.RFIDInfo.Builder addListBuilder() {
        return getListFieldBuilder().addBuilder(
            rfid.Rfid.RFIDInfo.getDefaultInstance());
      }
      /**
       * <code>repeated .rfid.RFIDInfo List = 2;</code>
       */
      public rfid.Rfid.RFIDInfo.Builder addListBuilder(
          int index) {
        return getListFieldBuilder().addBuilder(
            index, rfid.Rfid.RFIDInfo.getDefaultInstance());
      }
      /**
       * <code>repeated .rfid.RFIDInfo List = 2;</code>
       */
      public java.util.List<rfid.Rfid.RFIDInfo.Builder> 
           getListBuilderList() {
        return getListFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          rfid.Rfid.RFIDInfo, rfid.Rfid.RFIDInfo.Builder, rfid.Rfid.RFIDInfoOrBuilder> 
          getListFieldBuilder() {
        if (listBuilder_ == null) {
          listBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              rfid.Rfid.RFIDInfo, rfid.Rfid.RFIDInfo.Builder, rfid.Rfid.RFIDInfoOrBuilder>(
                  list_,
                  ((bitField0_ & 0x00000002) == 0x00000002),
                  getParentForChildren(),
                  isClean());
          list_ = null;
        }
        return listBuilder_;
      }

      private int opType_ = 0;
      /**
       * <code>.rfid.OpCode OpType = 3;</code>
       */
      public int getOpTypeValue() {
        return opType_;
      }
      /**
       * <code>.rfid.OpCode OpType = 3;</code>
       */
      public Builder setOpTypeValue(int value) {
        opType_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>.rfid.OpCode OpType = 3;</code>
       */
      public rfid.Rfid.OpCode getOpType() {
        @SuppressWarnings("deprecation")
        rfid.Rfid.OpCode result = rfid.Rfid.OpCode.valueOf(opType_);
        return result == null ? rfid.Rfid.OpCode.UNRECOGNIZED : result;
      }
      /**
       * <code>.rfid.OpCode OpType = 3;</code>
       */
      public Builder setOpType(rfid.Rfid.OpCode value) {
        if (value == null) {
          throw new NullPointerException();
        }
        
        opType_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <code>.rfid.OpCode OpType = 3;</code>
       */
      public Builder clearOpType() {
        
        opType_ = 0;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFieldsProto3(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:rfid.WriteParam)
    }

    // @@protoc_insertion_point(class_scope:rfid.WriteParam)
    private static final rfid.Rfid.WriteParam DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new rfid.Rfid.WriteParam();
    }

    public static rfid.Rfid.WriteParam getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<WriteParam>
        PARSER = new com.google.protobuf.AbstractParser<WriteParam>() {
      @java.lang.Override
      public WriteParam parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new WriteParam(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<WriteParam> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<WriteParam> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public rfid.Rfid.WriteParam getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface WriteReplyOrBuilder extends
      // @@protoc_insertion_point(interface_extends:rfid.WriteReply)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>.rfid.BaseReply BaseInfo = 1;</code>
     */
    boolean hasBaseInfo();
    /**
     * <code>.rfid.BaseReply BaseInfo = 1;</code>
     */
    rfid.Rfid.BaseReply getBaseInfo();
    /**
     * <code>.rfid.BaseReply BaseInfo = 1;</code>
     */
    rfid.Rfid.BaseReplyOrBuilder getBaseInfoOrBuilder();

    /**
     * <code>repeated .rfid.RFIDInfo List = 2;</code>
     */
    java.util.List<rfid.Rfid.RFIDInfo> 
        getListList();
    /**
     * <code>repeated .rfid.RFIDInfo List = 2;</code>
     */
    rfid.Rfid.RFIDInfo getList(int index);
    /**
     * <code>repeated .rfid.RFIDInfo List = 2;</code>
     */
    int getListCount();
    /**
     * <code>repeated .rfid.RFIDInfo List = 2;</code>
     */
    java.util.List<? extends rfid.Rfid.RFIDInfoOrBuilder> 
        getListOrBuilderList();
    /**
     * <code>repeated .rfid.RFIDInfo List = 2;</code>
     */
    rfid.Rfid.RFIDInfoOrBuilder getListOrBuilder(
        int index);

    /**
     * <code>int64 Count = 3;</code>
     */
    long getCount();
  }
  /**
   * Protobuf type {@code rfid.WriteReply}
   */
  public  static final class WriteReply extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:rfid.WriteReply)
      WriteReplyOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use WriteReply.newBuilder() to construct.
    private WriteReply(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private WriteReply() {
      list_ = java.util.Collections.emptyList();
      count_ = 0L;
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private WriteReply(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              rfid.Rfid.BaseReply.Builder subBuilder = null;
              if (baseInfo_ != null) {
                subBuilder = baseInfo_.toBuilder();
              }
              baseInfo_ = input.readMessage(rfid.Rfid.BaseReply.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(baseInfo_);
                baseInfo_ = subBuilder.buildPartial();
              }

              break;
            }
            case 18: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                list_ = new java.util.ArrayList<rfid.Rfid.RFIDInfo>();
                mutable_bitField0_ |= 0x00000002;
              }
              list_.add(
                  input.readMessage(rfid.Rfid.RFIDInfo.parser(), extensionRegistry));
              break;
            }
            case 24: {

              count_ = input.readInt64();
              break;
            }
            default: {
              if (!parseUnknownFieldProto3(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          list_ = java.util.Collections.unmodifiableList(list_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return rfid.Rfid.internal_static_rfid_WriteReply_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return rfid.Rfid.internal_static_rfid_WriteReply_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              rfid.Rfid.WriteReply.class, rfid.Rfid.WriteReply.Builder.class);
    }

    private int bitField0_;
    public static final int BASEINFO_FIELD_NUMBER = 1;
    private rfid.Rfid.BaseReply baseInfo_;
    /**
     * <code>.rfid.BaseReply BaseInfo = 1;</code>
     */
    public boolean hasBaseInfo() {
      return baseInfo_ != null;
    }
    /**
     * <code>.rfid.BaseReply BaseInfo = 1;</code>
     */
    public rfid.Rfid.BaseReply getBaseInfo() {
      return baseInfo_ == null ? rfid.Rfid.BaseReply.getDefaultInstance() : baseInfo_;
    }
    /**
     * <code>.rfid.BaseReply BaseInfo = 1;</code>
     */
    public rfid.Rfid.BaseReplyOrBuilder getBaseInfoOrBuilder() {
      return getBaseInfo();
    }

    public static final int LIST_FIELD_NUMBER = 2;
    private java.util.List<rfid.Rfid.RFIDInfo> list_;
    /**
     * <code>repeated .rfid.RFIDInfo List = 2;</code>
     */
    public java.util.List<rfid.Rfid.RFIDInfo> getListList() {
      return list_;
    }
    /**
     * <code>repeated .rfid.RFIDInfo List = 2;</code>
     */
    public java.util.List<? extends rfid.Rfid.RFIDInfoOrBuilder> 
        getListOrBuilderList() {
      return list_;
    }
    /**
     * <code>repeated .rfid.RFIDInfo List = 2;</code>
     */
    public int getListCount() {
      return list_.size();
    }
    /**
     * <code>repeated .rfid.RFIDInfo List = 2;</code>
     */
    public rfid.Rfid.RFIDInfo getList(int index) {
      return list_.get(index);
    }
    /**
     * <code>repeated .rfid.RFIDInfo List = 2;</code>
     */
    public rfid.Rfid.RFIDInfoOrBuilder getListOrBuilder(
        int index) {
      return list_.get(index);
    }

    public static final int COUNT_FIELD_NUMBER = 3;
    private long count_;
    /**
     * <code>int64 Count = 3;</code>
     */
    public long getCount() {
      return count_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (baseInfo_ != null) {
        output.writeMessage(1, getBaseInfo());
      }
      for (int i = 0; i < list_.size(); i++) {
        output.writeMessage(2, list_.get(i));
      }
      if (count_ != 0L) {
        output.writeInt64(3, count_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (baseInfo_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getBaseInfo());
      }
      for (int i = 0; i < list_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, list_.get(i));
      }
      if (count_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(3, count_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof rfid.Rfid.WriteReply)) {
        return super.equals(obj);
      }
      rfid.Rfid.WriteReply other = (rfid.Rfid.WriteReply) obj;

      boolean result = true;
      result = result && (hasBaseInfo() == other.hasBaseInfo());
      if (hasBaseInfo()) {
        result = result && getBaseInfo()
            .equals(other.getBaseInfo());
      }
      result = result && getListList()
          .equals(other.getListList());
      result = result && (getCount()
          == other.getCount());
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasBaseInfo()) {
        hash = (37 * hash) + BASEINFO_FIELD_NUMBER;
        hash = (53 * hash) + getBaseInfo().hashCode();
      }
      if (getListCount() > 0) {
        hash = (37 * hash) + LIST_FIELD_NUMBER;
        hash = (53 * hash) + getListList().hashCode();
      }
      hash = (37 * hash) + COUNT_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getCount());
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static rfid.Rfid.WriteReply parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static rfid.Rfid.WriteReply parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static rfid.Rfid.WriteReply parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static rfid.Rfid.WriteReply parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static rfid.Rfid.WriteReply parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static rfid.Rfid.WriteReply parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static rfid.Rfid.WriteReply parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static rfid.Rfid.WriteReply parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static rfid.Rfid.WriteReply parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static rfid.Rfid.WriteReply parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static rfid.Rfid.WriteReply parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static rfid.Rfid.WriteReply parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(rfid.Rfid.WriteReply prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code rfid.WriteReply}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:rfid.WriteReply)
        rfid.Rfid.WriteReplyOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return rfid.Rfid.internal_static_rfid_WriteReply_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return rfid.Rfid.internal_static_rfid_WriteReply_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                rfid.Rfid.WriteReply.class, rfid.Rfid.WriteReply.Builder.class);
      }

      // Construct using rfid.Rfid.WriteReply.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getListFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        if (baseInfoBuilder_ == null) {
          baseInfo_ = null;
        } else {
          baseInfo_ = null;
          baseInfoBuilder_ = null;
        }
        if (listBuilder_ == null) {
          list_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
        } else {
          listBuilder_.clear();
        }
        count_ = 0L;

        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return rfid.Rfid.internal_static_rfid_WriteReply_descriptor;
      }

      @java.lang.Override
      public rfid.Rfid.WriteReply getDefaultInstanceForType() {
        return rfid.Rfid.WriteReply.getDefaultInstance();
      }

      @java.lang.Override
      public rfid.Rfid.WriteReply build() {
        rfid.Rfid.WriteReply result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public rfid.Rfid.WriteReply buildPartial() {
        rfid.Rfid.WriteReply result = new rfid.Rfid.WriteReply(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (baseInfoBuilder_ == null) {
          result.baseInfo_ = baseInfo_;
        } else {
          result.baseInfo_ = baseInfoBuilder_.build();
        }
        if (listBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002)) {
            list_ = java.util.Collections.unmodifiableList(list_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.list_ = list_;
        } else {
          result.list_ = listBuilder_.build();
        }
        result.count_ = count_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return (Builder) super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof rfid.Rfid.WriteReply) {
          return mergeFrom((rfid.Rfid.WriteReply)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(rfid.Rfid.WriteReply other) {
        if (other == rfid.Rfid.WriteReply.getDefaultInstance()) return this;
        if (other.hasBaseInfo()) {
          mergeBaseInfo(other.getBaseInfo());
        }
        if (listBuilder_ == null) {
          if (!other.list_.isEmpty()) {
            if (list_.isEmpty()) {
              list_ = other.list_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensureListIsMutable();
              list_.addAll(other.list_);
            }
            onChanged();
          }
        } else {
          if (!other.list_.isEmpty()) {
            if (listBuilder_.isEmpty()) {
              listBuilder_.dispose();
              listBuilder_ = null;
              list_ = other.list_;
              bitField0_ = (bitField0_ & ~0x00000002);
              listBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getListFieldBuilder() : null;
            } else {
              listBuilder_.addAllMessages(other.list_);
            }
          }
        }
        if (other.getCount() != 0L) {
          setCount(other.getCount());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        rfid.Rfid.WriteReply parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (rfid.Rfid.WriteReply) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private rfid.Rfid.BaseReply baseInfo_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          rfid.Rfid.BaseReply, rfid.Rfid.BaseReply.Builder, rfid.Rfid.BaseReplyOrBuilder> baseInfoBuilder_;
      /**
       * <code>.rfid.BaseReply BaseInfo = 1;</code>
       */
      public boolean hasBaseInfo() {
        return baseInfoBuilder_ != null || baseInfo_ != null;
      }
      /**
       * <code>.rfid.BaseReply BaseInfo = 1;</code>
       */
      public rfid.Rfid.BaseReply getBaseInfo() {
        if (baseInfoBuilder_ == null) {
          return baseInfo_ == null ? rfid.Rfid.BaseReply.getDefaultInstance() : baseInfo_;
        } else {
          return baseInfoBuilder_.getMessage();
        }
      }
      /**
       * <code>.rfid.BaseReply BaseInfo = 1;</code>
       */
      public Builder setBaseInfo(rfid.Rfid.BaseReply value) {
        if (baseInfoBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          baseInfo_ = value;
          onChanged();
        } else {
          baseInfoBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <code>.rfid.BaseReply BaseInfo = 1;</code>
       */
      public Builder setBaseInfo(
          rfid.Rfid.BaseReply.Builder builderForValue) {
        if (baseInfoBuilder_ == null) {
          baseInfo_ = builderForValue.build();
          onChanged();
        } else {
          baseInfoBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <code>.rfid.BaseReply BaseInfo = 1;</code>
       */
      public Builder mergeBaseInfo(rfid.Rfid.BaseReply value) {
        if (baseInfoBuilder_ == null) {
          if (baseInfo_ != null) {
            baseInfo_ =
              rfid.Rfid.BaseReply.newBuilder(baseInfo_).mergeFrom(value).buildPartial();
          } else {
            baseInfo_ = value;
          }
          onChanged();
        } else {
          baseInfoBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <code>.rfid.BaseReply BaseInfo = 1;</code>
       */
      public Builder clearBaseInfo() {
        if (baseInfoBuilder_ == null) {
          baseInfo_ = null;
          onChanged();
        } else {
          baseInfo_ = null;
          baseInfoBuilder_ = null;
        }

        return this;
      }
      /**
       * <code>.rfid.BaseReply BaseInfo = 1;</code>
       */
      public rfid.Rfid.BaseReply.Builder getBaseInfoBuilder() {
        
        onChanged();
        return getBaseInfoFieldBuilder().getBuilder();
      }
      /**
       * <code>.rfid.BaseReply BaseInfo = 1;</code>
       */
      public rfid.Rfid.BaseReplyOrBuilder getBaseInfoOrBuilder() {
        if (baseInfoBuilder_ != null) {
          return baseInfoBuilder_.getMessageOrBuilder();
        } else {
          return baseInfo_ == null ?
              rfid.Rfid.BaseReply.getDefaultInstance() : baseInfo_;
        }
      }
      /**
       * <code>.rfid.BaseReply BaseInfo = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          rfid.Rfid.BaseReply, rfid.Rfid.BaseReply.Builder, rfid.Rfid.BaseReplyOrBuilder> 
          getBaseInfoFieldBuilder() {
        if (baseInfoBuilder_ == null) {
          baseInfoBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              rfid.Rfid.BaseReply, rfid.Rfid.BaseReply.Builder, rfid.Rfid.BaseReplyOrBuilder>(
                  getBaseInfo(),
                  getParentForChildren(),
                  isClean());
          baseInfo_ = null;
        }
        return baseInfoBuilder_;
      }

      private java.util.List<rfid.Rfid.RFIDInfo> list_ =
        java.util.Collections.emptyList();
      private void ensureListIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          list_ = new java.util.ArrayList<rfid.Rfid.RFIDInfo>(list_);
          bitField0_ |= 0x00000002;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          rfid.Rfid.RFIDInfo, rfid.Rfid.RFIDInfo.Builder, rfid.Rfid.RFIDInfoOrBuilder> listBuilder_;

      /**
       * <code>repeated .rfid.RFIDInfo List = 2;</code>
       */
      public java.util.List<rfid.Rfid.RFIDInfo> getListList() {
        if (listBuilder_ == null) {
          return java.util.Collections.unmodifiableList(list_);
        } else {
          return listBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .rfid.RFIDInfo List = 2;</code>
       */
      public int getListCount() {
        if (listBuilder_ == null) {
          return list_.size();
        } else {
          return listBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .rfid.RFIDInfo List = 2;</code>
       */
      public rfid.Rfid.RFIDInfo getList(int index) {
        if (listBuilder_ == null) {
          return list_.get(index);
        } else {
          return listBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .rfid.RFIDInfo List = 2;</code>
       */
      public Builder setList(
          int index, rfid.Rfid.RFIDInfo value) {
        if (listBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureListIsMutable();
          list_.set(index, value);
          onChanged();
        } else {
          listBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .rfid.RFIDInfo List = 2;</code>
       */
      public Builder setList(
          int index, rfid.Rfid.RFIDInfo.Builder builderForValue) {
        if (listBuilder_ == null) {
          ensureListIsMutable();
          list_.set(index, builderForValue.build());
          onChanged();
        } else {
          listBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .rfid.RFIDInfo List = 2;</code>
       */
      public Builder addList(rfid.Rfid.RFIDInfo value) {
        if (listBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureListIsMutable();
          list_.add(value);
          onChanged();
        } else {
          listBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .rfid.RFIDInfo List = 2;</code>
       */
      public Builder addList(
          int index, rfid.Rfid.RFIDInfo value) {
        if (listBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureListIsMutable();
          list_.add(index, value);
          onChanged();
        } else {
          listBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .rfid.RFIDInfo List = 2;</code>
       */
      public Builder addList(
          rfid.Rfid.RFIDInfo.Builder builderForValue) {
        if (listBuilder_ == null) {
          ensureListIsMutable();
          list_.add(builderForValue.build());
          onChanged();
        } else {
          listBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .rfid.RFIDInfo List = 2;</code>
       */
      public Builder addList(
          int index, rfid.Rfid.RFIDInfo.Builder builderForValue) {
        if (listBuilder_ == null) {
          ensureListIsMutable();
          list_.add(index, builderForValue.build());
          onChanged();
        } else {
          listBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .rfid.RFIDInfo List = 2;</code>
       */
      public Builder addAllList(
          java.lang.Iterable<? extends rfid.Rfid.RFIDInfo> values) {
        if (listBuilder_ == null) {
          ensureListIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, list_);
          onChanged();
        } else {
          listBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .rfid.RFIDInfo List = 2;</code>
       */
      public Builder clearList() {
        if (listBuilder_ == null) {
          list_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          listBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .rfid.RFIDInfo List = 2;</code>
       */
      public Builder removeList(int index) {
        if (listBuilder_ == null) {
          ensureListIsMutable();
          list_.remove(index);
          onChanged();
        } else {
          listBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .rfid.RFIDInfo List = 2;</code>
       */
      public rfid.Rfid.RFIDInfo.Builder getListBuilder(
          int index) {
        return getListFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .rfid.RFIDInfo List = 2;</code>
       */
      public rfid.Rfid.RFIDInfoOrBuilder getListOrBuilder(
          int index) {
        if (listBuilder_ == null) {
          return list_.get(index);  } else {
          return listBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .rfid.RFIDInfo List = 2;</code>
       */
      public java.util.List<? extends rfid.Rfid.RFIDInfoOrBuilder> 
           getListOrBuilderList() {
        if (listBuilder_ != null) {
          return listBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(list_);
        }
      }
      /**
       * <code>repeated .rfid.RFIDInfo List = 2;</code>
       */
      public rfid.Rfid.RFIDInfo.Builder addListBuilder() {
        return getListFieldBuilder().addBuilder(
            rfid.Rfid.RFIDInfo.getDefaultInstance());
      }
      /**
       * <code>repeated .rfid.RFIDInfo List = 2;</code>
       */
      public rfid.Rfid.RFIDInfo.Builder addListBuilder(
          int index) {
        return getListFieldBuilder().addBuilder(
            index, rfid.Rfid.RFIDInfo.getDefaultInstance());
      }
      /**
       * <code>repeated .rfid.RFIDInfo List = 2;</code>
       */
      public java.util.List<rfid.Rfid.RFIDInfo.Builder> 
           getListBuilderList() {
        return getListFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          rfid.Rfid.RFIDInfo, rfid.Rfid.RFIDInfo.Builder, rfid.Rfid.RFIDInfoOrBuilder> 
          getListFieldBuilder() {
        if (listBuilder_ == null) {
          listBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              rfid.Rfid.RFIDInfo, rfid.Rfid.RFIDInfo.Builder, rfid.Rfid.RFIDInfoOrBuilder>(
                  list_,
                  ((bitField0_ & 0x00000002) == 0x00000002),
                  getParentForChildren(),
                  isClean());
          list_ = null;
        }
        return listBuilder_;
      }

      private long count_ ;
      /**
       * <code>int64 Count = 3;</code>
       */
      public long getCount() {
        return count_;
      }
      /**
       * <code>int64 Count = 3;</code>
       */
      public Builder setCount(long value) {
        
        count_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>int64 Count = 3;</code>
       */
      public Builder clearCount() {
        
        count_ = 0L;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFieldsProto3(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:rfid.WriteReply)
    }

    // @@protoc_insertion_point(class_scope:rfid.WriteReply)
    private static final rfid.Rfid.WriteReply DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new rfid.Rfid.WriteReply();
    }

    public static rfid.Rfid.WriteReply getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<WriteReply>
        PARSER = new com.google.protobuf.AbstractParser<WriteReply>() {
      @java.lang.Override
      public WriteReply parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new WriteReply(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<WriteReply> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<WriteReply> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public rfid.Rfid.WriteReply getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface InitParamOrBuilder extends
      // @@protoc_insertion_point(interface_extends:rfid.InitParam)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>.rfid.BaseParam BaseInfo = 1;</code>
     */
    boolean hasBaseInfo();
    /**
     * <code>.rfid.BaseParam BaseInfo = 1;</code>
     */
    rfid.Rfid.BaseParam getBaseInfo();
    /**
     * <code>.rfid.BaseParam BaseInfo = 1;</code>
     */
    rfid.Rfid.BaseParamOrBuilder getBaseInfoOrBuilder();

    /**
     * <code>.rfid.OpCode OpType = 2;</code>
     */
    int getOpTypeValue();
    /**
     * <code>.rfid.OpCode OpType = 2;</code>
     */
    rfid.Rfid.OpCode getOpType();
  }
  /**
   * <pre>
   * 初始化RFID
   * </pre>
   *
   * Protobuf type {@code rfid.InitParam}
   */
  public  static final class InitParam extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:rfid.InitParam)
      InitParamOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use InitParam.newBuilder() to construct.
    private InitParam(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private InitParam() {
      opType_ = 0;
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private InitParam(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              rfid.Rfid.BaseParam.Builder subBuilder = null;
              if (baseInfo_ != null) {
                subBuilder = baseInfo_.toBuilder();
              }
              baseInfo_ = input.readMessage(rfid.Rfid.BaseParam.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(baseInfo_);
                baseInfo_ = subBuilder.buildPartial();
              }

              break;
            }
            case 16: {
              int rawValue = input.readEnum();

              opType_ = rawValue;
              break;
            }
            default: {
              if (!parseUnknownFieldProto3(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return rfid.Rfid.internal_static_rfid_InitParam_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return rfid.Rfid.internal_static_rfid_InitParam_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              rfid.Rfid.InitParam.class, rfid.Rfid.InitParam.Builder.class);
    }

    public static final int BASEINFO_FIELD_NUMBER = 1;
    private rfid.Rfid.BaseParam baseInfo_;
    /**
     * <code>.rfid.BaseParam BaseInfo = 1;</code>
     */
    public boolean hasBaseInfo() {
      return baseInfo_ != null;
    }
    /**
     * <code>.rfid.BaseParam BaseInfo = 1;</code>
     */
    public rfid.Rfid.BaseParam getBaseInfo() {
      return baseInfo_ == null ? rfid.Rfid.BaseParam.getDefaultInstance() : baseInfo_;
    }
    /**
     * <code>.rfid.BaseParam BaseInfo = 1;</code>
     */
    public rfid.Rfid.BaseParamOrBuilder getBaseInfoOrBuilder() {
      return getBaseInfo();
    }

    public static final int OPTYPE_FIELD_NUMBER = 2;
    private int opType_;
    /**
     * <code>.rfid.OpCode OpType = 2;</code>
     */
    public int getOpTypeValue() {
      return opType_;
    }
    /**
     * <code>.rfid.OpCode OpType = 2;</code>
     */
    public rfid.Rfid.OpCode getOpType() {
      @SuppressWarnings("deprecation")
      rfid.Rfid.OpCode result = rfid.Rfid.OpCode.valueOf(opType_);
      return result == null ? rfid.Rfid.OpCode.UNRECOGNIZED : result;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (baseInfo_ != null) {
        output.writeMessage(1, getBaseInfo());
      }
      if (opType_ != rfid.Rfid.OpCode.Start.getNumber()) {
        output.writeEnum(2, opType_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (baseInfo_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getBaseInfo());
      }
      if (opType_ != rfid.Rfid.OpCode.Start.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(2, opType_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof rfid.Rfid.InitParam)) {
        return super.equals(obj);
      }
      rfid.Rfid.InitParam other = (rfid.Rfid.InitParam) obj;

      boolean result = true;
      result = result && (hasBaseInfo() == other.hasBaseInfo());
      if (hasBaseInfo()) {
        result = result && getBaseInfo()
            .equals(other.getBaseInfo());
      }
      result = result && opType_ == other.opType_;
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasBaseInfo()) {
        hash = (37 * hash) + BASEINFO_FIELD_NUMBER;
        hash = (53 * hash) + getBaseInfo().hashCode();
      }
      hash = (37 * hash) + OPTYPE_FIELD_NUMBER;
      hash = (53 * hash) + opType_;
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static rfid.Rfid.InitParam parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static rfid.Rfid.InitParam parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static rfid.Rfid.InitParam parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static rfid.Rfid.InitParam parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static rfid.Rfid.InitParam parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static rfid.Rfid.InitParam parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static rfid.Rfid.InitParam parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static rfid.Rfid.InitParam parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static rfid.Rfid.InitParam parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static rfid.Rfid.InitParam parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static rfid.Rfid.InitParam parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static rfid.Rfid.InitParam parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(rfid.Rfid.InitParam prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * 初始化RFID
     * </pre>
     *
     * Protobuf type {@code rfid.InitParam}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:rfid.InitParam)
        rfid.Rfid.InitParamOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return rfid.Rfid.internal_static_rfid_InitParam_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return rfid.Rfid.internal_static_rfid_InitParam_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                rfid.Rfid.InitParam.class, rfid.Rfid.InitParam.Builder.class);
      }

      // Construct using rfid.Rfid.InitParam.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        if (baseInfoBuilder_ == null) {
          baseInfo_ = null;
        } else {
          baseInfo_ = null;
          baseInfoBuilder_ = null;
        }
        opType_ = 0;

        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return rfid.Rfid.internal_static_rfid_InitParam_descriptor;
      }

      @java.lang.Override
      public rfid.Rfid.InitParam getDefaultInstanceForType() {
        return rfid.Rfid.InitParam.getDefaultInstance();
      }

      @java.lang.Override
      public rfid.Rfid.InitParam build() {
        rfid.Rfid.InitParam result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public rfid.Rfid.InitParam buildPartial() {
        rfid.Rfid.InitParam result = new rfid.Rfid.InitParam(this);
        if (baseInfoBuilder_ == null) {
          result.baseInfo_ = baseInfo_;
        } else {
          result.baseInfo_ = baseInfoBuilder_.build();
        }
        result.opType_ = opType_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return (Builder) super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof rfid.Rfid.InitParam) {
          return mergeFrom((rfid.Rfid.InitParam)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(rfid.Rfid.InitParam other) {
        if (other == rfid.Rfid.InitParam.getDefaultInstance()) return this;
        if (other.hasBaseInfo()) {
          mergeBaseInfo(other.getBaseInfo());
        }
        if (other.opType_ != 0) {
          setOpTypeValue(other.getOpTypeValue());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        rfid.Rfid.InitParam parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (rfid.Rfid.InitParam) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private rfid.Rfid.BaseParam baseInfo_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          rfid.Rfid.BaseParam, rfid.Rfid.BaseParam.Builder, rfid.Rfid.BaseParamOrBuilder> baseInfoBuilder_;
      /**
       * <code>.rfid.BaseParam BaseInfo = 1;</code>
       */
      public boolean hasBaseInfo() {
        return baseInfoBuilder_ != null || baseInfo_ != null;
      }
      /**
       * <code>.rfid.BaseParam BaseInfo = 1;</code>
       */
      public rfid.Rfid.BaseParam getBaseInfo() {
        if (baseInfoBuilder_ == null) {
          return baseInfo_ == null ? rfid.Rfid.BaseParam.getDefaultInstance() : baseInfo_;
        } else {
          return baseInfoBuilder_.getMessage();
        }
      }
      /**
       * <code>.rfid.BaseParam BaseInfo = 1;</code>
       */
      public Builder setBaseInfo(rfid.Rfid.BaseParam value) {
        if (baseInfoBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          baseInfo_ = value;
          onChanged();
        } else {
          baseInfoBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <code>.rfid.BaseParam BaseInfo = 1;</code>
       */
      public Builder setBaseInfo(
          rfid.Rfid.BaseParam.Builder builderForValue) {
        if (baseInfoBuilder_ == null) {
          baseInfo_ = builderForValue.build();
          onChanged();
        } else {
          baseInfoBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <code>.rfid.BaseParam BaseInfo = 1;</code>
       */
      public Builder mergeBaseInfo(rfid.Rfid.BaseParam value) {
        if (baseInfoBuilder_ == null) {
          if (baseInfo_ != null) {
            baseInfo_ =
              rfid.Rfid.BaseParam.newBuilder(baseInfo_).mergeFrom(value).buildPartial();
          } else {
            baseInfo_ = value;
          }
          onChanged();
        } else {
          baseInfoBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <code>.rfid.BaseParam BaseInfo = 1;</code>
       */
      public Builder clearBaseInfo() {
        if (baseInfoBuilder_ == null) {
          baseInfo_ = null;
          onChanged();
        } else {
          baseInfo_ = null;
          baseInfoBuilder_ = null;
        }

        return this;
      }
      /**
       * <code>.rfid.BaseParam BaseInfo = 1;</code>
       */
      public rfid.Rfid.BaseParam.Builder getBaseInfoBuilder() {
        
        onChanged();
        return getBaseInfoFieldBuilder().getBuilder();
      }
      /**
       * <code>.rfid.BaseParam BaseInfo = 1;</code>
       */
      public rfid.Rfid.BaseParamOrBuilder getBaseInfoOrBuilder() {
        if (baseInfoBuilder_ != null) {
          return baseInfoBuilder_.getMessageOrBuilder();
        } else {
          return baseInfo_ == null ?
              rfid.Rfid.BaseParam.getDefaultInstance() : baseInfo_;
        }
      }
      /**
       * <code>.rfid.BaseParam BaseInfo = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          rfid.Rfid.BaseParam, rfid.Rfid.BaseParam.Builder, rfid.Rfid.BaseParamOrBuilder> 
          getBaseInfoFieldBuilder() {
        if (baseInfoBuilder_ == null) {
          baseInfoBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              rfid.Rfid.BaseParam, rfid.Rfid.BaseParam.Builder, rfid.Rfid.BaseParamOrBuilder>(
                  getBaseInfo(),
                  getParentForChildren(),
                  isClean());
          baseInfo_ = null;
        }
        return baseInfoBuilder_;
      }

      private int opType_ = 0;
      /**
       * <code>.rfid.OpCode OpType = 2;</code>
       */
      public int getOpTypeValue() {
        return opType_;
      }
      /**
       * <code>.rfid.OpCode OpType = 2;</code>
       */
      public Builder setOpTypeValue(int value) {
        opType_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>.rfid.OpCode OpType = 2;</code>
       */
      public rfid.Rfid.OpCode getOpType() {
        @SuppressWarnings("deprecation")
        rfid.Rfid.OpCode result = rfid.Rfid.OpCode.valueOf(opType_);
        return result == null ? rfid.Rfid.OpCode.UNRECOGNIZED : result;
      }
      /**
       * <code>.rfid.OpCode OpType = 2;</code>
       */
      public Builder setOpType(rfid.Rfid.OpCode value) {
        if (value == null) {
          throw new NullPointerException();
        }
        
        opType_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <code>.rfid.OpCode OpType = 2;</code>
       */
      public Builder clearOpType() {
        
        opType_ = 0;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFieldsProto3(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:rfid.InitParam)
    }

    // @@protoc_insertion_point(class_scope:rfid.InitParam)
    private static final rfid.Rfid.InitParam DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new rfid.Rfid.InitParam();
    }

    public static rfid.Rfid.InitParam getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<InitParam>
        PARSER = new com.google.protobuf.AbstractParser<InitParam>() {
      @java.lang.Override
      public InitParam parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new InitParam(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<InitParam> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<InitParam> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public rfid.Rfid.InitParam getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface InitReplyOrBuilder extends
      // @@protoc_insertion_point(interface_extends:rfid.InitReply)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>.rfid.BaseReply BaseInfo = 1;</code>
     */
    boolean hasBaseInfo();
    /**
     * <code>.rfid.BaseReply BaseInfo = 1;</code>
     */
    rfid.Rfid.BaseReply getBaseInfo();
    /**
     * <code>.rfid.BaseReply BaseInfo = 1;</code>
     */
    rfid.Rfid.BaseReplyOrBuilder getBaseInfoOrBuilder();

    /**
     * <code>int64 ReadNum = 2;</code>
     */
    long getReadNum();

    /**
     * <code>int64 WriteNum = 3;</code>
     */
    long getWriteNum();
  }
  /**
   * Protobuf type {@code rfid.InitReply}
   */
  public  static final class InitReply extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:rfid.InitReply)
      InitReplyOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use InitReply.newBuilder() to construct.
    private InitReply(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private InitReply() {
      readNum_ = 0L;
      writeNum_ = 0L;
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private InitReply(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              rfid.Rfid.BaseReply.Builder subBuilder = null;
              if (baseInfo_ != null) {
                subBuilder = baseInfo_.toBuilder();
              }
              baseInfo_ = input.readMessage(rfid.Rfid.BaseReply.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(baseInfo_);
                baseInfo_ = subBuilder.buildPartial();
              }

              break;
            }
            case 16: {

              readNum_ = input.readInt64();
              break;
            }
            case 24: {

              writeNum_ = input.readInt64();
              break;
            }
            default: {
              if (!parseUnknownFieldProto3(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return rfid.Rfid.internal_static_rfid_InitReply_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return rfid.Rfid.internal_static_rfid_InitReply_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              rfid.Rfid.InitReply.class, rfid.Rfid.InitReply.Builder.class);
    }

    public static final int BASEINFO_FIELD_NUMBER = 1;
    private rfid.Rfid.BaseReply baseInfo_;
    /**
     * <code>.rfid.BaseReply BaseInfo = 1;</code>
     */
    public boolean hasBaseInfo() {
      return baseInfo_ != null;
    }
    /**
     * <code>.rfid.BaseReply BaseInfo = 1;</code>
     */
    public rfid.Rfid.BaseReply getBaseInfo() {
      return baseInfo_ == null ? rfid.Rfid.BaseReply.getDefaultInstance() : baseInfo_;
    }
    /**
     * <code>.rfid.BaseReply BaseInfo = 1;</code>
     */
    public rfid.Rfid.BaseReplyOrBuilder getBaseInfoOrBuilder() {
      return getBaseInfo();
    }

    public static final int READNUM_FIELD_NUMBER = 2;
    private long readNum_;
    /**
     * <code>int64 ReadNum = 2;</code>
     */
    public long getReadNum() {
      return readNum_;
    }

    public static final int WRITENUM_FIELD_NUMBER = 3;
    private long writeNum_;
    /**
     * <code>int64 WriteNum = 3;</code>
     */
    public long getWriteNum() {
      return writeNum_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (baseInfo_ != null) {
        output.writeMessage(1, getBaseInfo());
      }
      if (readNum_ != 0L) {
        output.writeInt64(2, readNum_);
      }
      if (writeNum_ != 0L) {
        output.writeInt64(3, writeNum_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (baseInfo_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getBaseInfo());
      }
      if (readNum_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(2, readNum_);
      }
      if (writeNum_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(3, writeNum_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof rfid.Rfid.InitReply)) {
        return super.equals(obj);
      }
      rfid.Rfid.InitReply other = (rfid.Rfid.InitReply) obj;

      boolean result = true;
      result = result && (hasBaseInfo() == other.hasBaseInfo());
      if (hasBaseInfo()) {
        result = result && getBaseInfo()
            .equals(other.getBaseInfo());
      }
      result = result && (getReadNum()
          == other.getReadNum());
      result = result && (getWriteNum()
          == other.getWriteNum());
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasBaseInfo()) {
        hash = (37 * hash) + BASEINFO_FIELD_NUMBER;
        hash = (53 * hash) + getBaseInfo().hashCode();
      }
      hash = (37 * hash) + READNUM_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getReadNum());
      hash = (37 * hash) + WRITENUM_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getWriteNum());
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static rfid.Rfid.InitReply parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static rfid.Rfid.InitReply parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static rfid.Rfid.InitReply parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static rfid.Rfid.InitReply parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static rfid.Rfid.InitReply parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static rfid.Rfid.InitReply parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static rfid.Rfid.InitReply parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static rfid.Rfid.InitReply parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static rfid.Rfid.InitReply parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static rfid.Rfid.InitReply parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static rfid.Rfid.InitReply parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static rfid.Rfid.InitReply parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(rfid.Rfid.InitReply prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code rfid.InitReply}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:rfid.InitReply)
        rfid.Rfid.InitReplyOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return rfid.Rfid.internal_static_rfid_InitReply_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return rfid.Rfid.internal_static_rfid_InitReply_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                rfid.Rfid.InitReply.class, rfid.Rfid.InitReply.Builder.class);
      }

      // Construct using rfid.Rfid.InitReply.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        if (baseInfoBuilder_ == null) {
          baseInfo_ = null;
        } else {
          baseInfo_ = null;
          baseInfoBuilder_ = null;
        }
        readNum_ = 0L;

        writeNum_ = 0L;

        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return rfid.Rfid.internal_static_rfid_InitReply_descriptor;
      }

      @java.lang.Override
      public rfid.Rfid.InitReply getDefaultInstanceForType() {
        return rfid.Rfid.InitReply.getDefaultInstance();
      }

      @java.lang.Override
      public rfid.Rfid.InitReply build() {
        rfid.Rfid.InitReply result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public rfid.Rfid.InitReply buildPartial() {
        rfid.Rfid.InitReply result = new rfid.Rfid.InitReply(this);
        if (baseInfoBuilder_ == null) {
          result.baseInfo_ = baseInfo_;
        } else {
          result.baseInfo_ = baseInfoBuilder_.build();
        }
        result.readNum_ = readNum_;
        result.writeNum_ = writeNum_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return (Builder) super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof rfid.Rfid.InitReply) {
          return mergeFrom((rfid.Rfid.InitReply)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(rfid.Rfid.InitReply other) {
        if (other == rfid.Rfid.InitReply.getDefaultInstance()) return this;
        if (other.hasBaseInfo()) {
          mergeBaseInfo(other.getBaseInfo());
        }
        if (other.getReadNum() != 0L) {
          setReadNum(other.getReadNum());
        }
        if (other.getWriteNum() != 0L) {
          setWriteNum(other.getWriteNum());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        rfid.Rfid.InitReply parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (rfid.Rfid.InitReply) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private rfid.Rfid.BaseReply baseInfo_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          rfid.Rfid.BaseReply, rfid.Rfid.BaseReply.Builder, rfid.Rfid.BaseReplyOrBuilder> baseInfoBuilder_;
      /**
       * <code>.rfid.BaseReply BaseInfo = 1;</code>
       */
      public boolean hasBaseInfo() {
        return baseInfoBuilder_ != null || baseInfo_ != null;
      }
      /**
       * <code>.rfid.BaseReply BaseInfo = 1;</code>
       */
      public rfid.Rfid.BaseReply getBaseInfo() {
        if (baseInfoBuilder_ == null) {
          return baseInfo_ == null ? rfid.Rfid.BaseReply.getDefaultInstance() : baseInfo_;
        } else {
          return baseInfoBuilder_.getMessage();
        }
      }
      /**
       * <code>.rfid.BaseReply BaseInfo = 1;</code>
       */
      public Builder setBaseInfo(rfid.Rfid.BaseReply value) {
        if (baseInfoBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          baseInfo_ = value;
          onChanged();
        } else {
          baseInfoBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <code>.rfid.BaseReply BaseInfo = 1;</code>
       */
      public Builder setBaseInfo(
          rfid.Rfid.BaseReply.Builder builderForValue) {
        if (baseInfoBuilder_ == null) {
          baseInfo_ = builderForValue.build();
          onChanged();
        } else {
          baseInfoBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <code>.rfid.BaseReply BaseInfo = 1;</code>
       */
      public Builder mergeBaseInfo(rfid.Rfid.BaseReply value) {
        if (baseInfoBuilder_ == null) {
          if (baseInfo_ != null) {
            baseInfo_ =
              rfid.Rfid.BaseReply.newBuilder(baseInfo_).mergeFrom(value).buildPartial();
          } else {
            baseInfo_ = value;
          }
          onChanged();
        } else {
          baseInfoBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <code>.rfid.BaseReply BaseInfo = 1;</code>
       */
      public Builder clearBaseInfo() {
        if (baseInfoBuilder_ == null) {
          baseInfo_ = null;
          onChanged();
        } else {
          baseInfo_ = null;
          baseInfoBuilder_ = null;
        }

        return this;
      }
      /**
       * <code>.rfid.BaseReply BaseInfo = 1;</code>
       */
      public rfid.Rfid.BaseReply.Builder getBaseInfoBuilder() {
        
        onChanged();
        return getBaseInfoFieldBuilder().getBuilder();
      }
      /**
       * <code>.rfid.BaseReply BaseInfo = 1;</code>
       */
      public rfid.Rfid.BaseReplyOrBuilder getBaseInfoOrBuilder() {
        if (baseInfoBuilder_ != null) {
          return baseInfoBuilder_.getMessageOrBuilder();
        } else {
          return baseInfo_ == null ?
              rfid.Rfid.BaseReply.getDefaultInstance() : baseInfo_;
        }
      }
      /**
       * <code>.rfid.BaseReply BaseInfo = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          rfid.Rfid.BaseReply, rfid.Rfid.BaseReply.Builder, rfid.Rfid.BaseReplyOrBuilder> 
          getBaseInfoFieldBuilder() {
        if (baseInfoBuilder_ == null) {
          baseInfoBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              rfid.Rfid.BaseReply, rfid.Rfid.BaseReply.Builder, rfid.Rfid.BaseReplyOrBuilder>(
                  getBaseInfo(),
                  getParentForChildren(),
                  isClean());
          baseInfo_ = null;
        }
        return baseInfoBuilder_;
      }

      private long readNum_ ;
      /**
       * <code>int64 ReadNum = 2;</code>
       */
      public long getReadNum() {
        return readNum_;
      }
      /**
       * <code>int64 ReadNum = 2;</code>
       */
      public Builder setReadNum(long value) {
        
        readNum_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>int64 ReadNum = 2;</code>
       */
      public Builder clearReadNum() {
        
        readNum_ = 0L;
        onChanged();
        return this;
      }

      private long writeNum_ ;
      /**
       * <code>int64 WriteNum = 3;</code>
       */
      public long getWriteNum() {
        return writeNum_;
      }
      /**
       * <code>int64 WriteNum = 3;</code>
       */
      public Builder setWriteNum(long value) {
        
        writeNum_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>int64 WriteNum = 3;</code>
       */
      public Builder clearWriteNum() {
        
        writeNum_ = 0L;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFieldsProto3(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:rfid.InitReply)
    }

    // @@protoc_insertion_point(class_scope:rfid.InitReply)
    private static final rfid.Rfid.InitReply DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new rfid.Rfid.InitReply();
    }

    public static rfid.Rfid.InitReply getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<InitReply>
        PARSER = new com.google.protobuf.AbstractParser<InitReply>() {
      @java.lang.Override
      public InitReply parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new InitReply(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<InitReply> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<InitReply> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public rfid.Rfid.InitReply getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_rfid_BaseParam_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_rfid_BaseParam_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_rfid_BaseReply_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_rfid_BaseReply_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_rfid_RegisterParam_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_rfid_RegisterParam_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_rfid_RegisterReply_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_rfid_RegisterReply_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_rfid_RFIDInfo_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_rfid_RFIDInfo_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_rfid_ReadParam_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_rfid_ReadParam_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_rfid_ReadReply_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_rfid_ReadReply_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_rfid_WriteParam_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_rfid_WriteParam_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_rfid_WriteReply_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_rfid_WriteReply_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_rfid_InitParam_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_rfid_InitParam_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_rfid_InitReply_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_rfid_InitReply_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\nrfid.proto\022\004rfid\"\013\n\tBaseParam\"D\n\tBaseR" +
      "eply\022$\n\nResultCode\030\001 \001(\0162\020.rfid.ResultCo" +
      "de\022\021\n\tResultMsg\030\002 \001(\t\"\214\001\n\rRegisterParam\022" +
      "!\n\010BaseInfo\030\001 \001(\0132\017.rfid.BaseParam\022\021\n\tFa" +
      "cotryId\030\002 \001(\003\022!\n\tSiteTypes\030\003 \003(\0162\016.rfid." +
      "SiteType\022\017\n\007RPCAddr\030\004 \001(\t\022\021\n\tPublicKey\030\005" +
      " \001(\014\"E\n\rRegisterReply\022!\n\010BaseInfo\030\001 \001(\0132" +
      "\017.rfid.BaseReply\022\021\n\tPublicKey\030\002 \001(\014\"Y\n\010R" +
      "FIDInfo\022!\n\010BaseInfo\030\001 \001(\0132\017.rfid.BaseRep" +
      "ly\022\n\n\002Id\030\002 \001(\003\022\013\n\003EPC\030\003 \001(\t\022\021\n\tFactoryId" +
      "\030\004 \001(\003\"L\n\tReadParam\022!\n\010BaseInfo\030\001 \001(\0132\017." +
      "rfid.BaseParam\022\034\n\006OpType\030\002 \001(\0162\014.rfid.Op" +
      "Code\"[\n\tReadReply\022!\n\010BaseInfo\030\001 \001(\0132\017.rf" +
      "id.BaseReply\022\034\n\004List\030\002 \003(\0132\016.rfid.RFIDIn" +
      "fo\022\r\n\005Count\030\003 \001(\003\"k\n\nWriteParam\022!\n\010BaseI" +
      "nfo\030\001 \001(\0132\017.rfid.BaseParam\022\034\n\004List\030\002 \003(\013" +
      "2\016.rfid.RFIDInfo\022\034\n\006OpType\030\003 \001(\0162\014.rfid." +
      "OpCode\"\\\n\nWriteReply\022!\n\010BaseInfo\030\001 \001(\0132\017" +
      ".rfid.BaseReply\022\034\n\004List\030\002 \003(\0132\016.rfid.RFI" +
      "DInfo\022\r\n\005Count\030\003 \001(\003\"L\n\tInitParam\022!\n\010Bas" +
      "eInfo\030\001 \001(\0132\017.rfid.BaseParam\022\034\n\006OpType\030\002" +
      " \001(\0162\014.rfid.OpCode\"Q\n\tInitReply\022!\n\010BaseI" +
      "nfo\030\001 \001(\0132\017.rfid.BaseReply\022\017\n\007ReadNum\030\002 " +
      "\001(\003\022\020\n\010WriteNum\030\003 \001(\003*F\n\010SiteType\022\t\n\005DEB" +
      "UG\020\000\022\r\n\tDISPENSER\020\001\022\013\n\007CHECKER\020\002\022\t\n\005ENTR" +
      "Y\020\003\022\010\n\004EXIT\020\004*\254\001\n\nResultCode\022\n\n\006NotErr\020\000" +
      "\022\025\n\021ErrNotInDebugMode\020\001\022\020\n\014ErrStartInit\020" +
      "\002\022\017\n\013ErrStopInit\020\003\022\025\n\021ErrStartInventory\020" +
      "\004\022\024\n\020ErrStopInventory\020\005\022\024\n\020ErrReadInvent" +
      "ory\020\006\022\025\n\021ErrResetInventory\020\007*\035\n\006OpCode\022\t" +
      "\n\005Start\020\000\022\010\n\004Stop\020\0012G\n\rRFIDDispenser\0226\n\010" +
      "Register\022\023.rfid.RegisterParam\032\023.rfid.Reg" +
      "isterReply\"\0002\231\001\n\004RFID\022.\n\004Read\022\017.rfid.Rea" +
      "dParam\032\017.rfid.ReadReply\"\000(\0010\001\0221\n\005Write\022\020" +
      ".rfid.WriteParam\032\020.rfid.WriteReply\"\000(\0010\001" +
      "\022.\n\004Init\022\017.rfid.InitParam\032\017.rfid.InitRep" +
      "ly\"\000(\0010\001b\006proto3"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
    internal_static_rfid_BaseParam_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_rfid_BaseParam_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_rfid_BaseParam_descriptor,
        new java.lang.String[] { });
    internal_static_rfid_BaseReply_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_rfid_BaseReply_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_rfid_BaseReply_descriptor,
        new java.lang.String[] { "ResultCode", "ResultMsg", });
    internal_static_rfid_RegisterParam_descriptor =
      getDescriptor().getMessageTypes().get(2);
    internal_static_rfid_RegisterParam_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_rfid_RegisterParam_descriptor,
        new java.lang.String[] { "BaseInfo", "FacotryId", "SiteTypes", "RPCAddr", "PublicKey", });
    internal_static_rfid_RegisterReply_descriptor =
      getDescriptor().getMessageTypes().get(3);
    internal_static_rfid_RegisterReply_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_rfid_RegisterReply_descriptor,
        new java.lang.String[] { "BaseInfo", "PublicKey", });
    internal_static_rfid_RFIDInfo_descriptor =
      getDescriptor().getMessageTypes().get(4);
    internal_static_rfid_RFIDInfo_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_rfid_RFIDInfo_descriptor,
        new java.lang.String[] { "BaseInfo", "Id", "EPC", "FactoryId", });
    internal_static_rfid_ReadParam_descriptor =
      getDescriptor().getMessageTypes().get(5);
    internal_static_rfid_ReadParam_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_rfid_ReadParam_descriptor,
        new java.lang.String[] { "BaseInfo", "OpType", });
    internal_static_rfid_ReadReply_descriptor =
      getDescriptor().getMessageTypes().get(6);
    internal_static_rfid_ReadReply_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_rfid_ReadReply_descriptor,
        new java.lang.String[] { "BaseInfo", "List", "Count", });
    internal_static_rfid_WriteParam_descriptor =
      getDescriptor().getMessageTypes().get(7);
    internal_static_rfid_WriteParam_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_rfid_WriteParam_descriptor,
        new java.lang.String[] { "BaseInfo", "List", "OpType", });
    internal_static_rfid_WriteReply_descriptor =
      getDescriptor().getMessageTypes().get(8);
    internal_static_rfid_WriteReply_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_rfid_WriteReply_descriptor,
        new java.lang.String[] { "BaseInfo", "List", "Count", });
    internal_static_rfid_InitParam_descriptor =
      getDescriptor().getMessageTypes().get(9);
    internal_static_rfid_InitParam_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_rfid_InitParam_descriptor,
        new java.lang.String[] { "BaseInfo", "OpType", });
    internal_static_rfid_InitReply_descriptor =
      getDescriptor().getMessageTypes().get(10);
    internal_static_rfid_InitReply_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_rfid_InitReply_descriptor,
        new java.lang.String[] { "BaseInfo", "ReadNum", "WriteNum", });
  }

  // @@protoc_insertion_point(outer_class_scope)
}
